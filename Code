{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ruwinimadhu/SER-domain-shift/blob/Code/Code\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QZ2_qSLJcHAV",
        "outputId": "89f001f8-67c0-4171-a08b-639b8345c6c6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Example: if your CSVs are in My Drive\n",
        "import pandas as pd\n",
        "male = pd.read_csv(\"/content/drive/My Drive/Male_features.csv\")\n",
        "female = pd.read_csv(\"/content/drive/My Drive/Female_features.csv\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "id": "ws9d8pnXbgOJ",
        "outputId": "187805ce-fd4d-4058-c6b9-6f457f2fa45a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(85134, 60)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            0           1          2          3          4         5  \\\n",
              "0 -280.558350  118.419098   8.925080  29.063490 -17.713118  0.083584   \n",
              "1 -138.495236   53.219675  19.017487   4.935156  -4.009660 -8.325881   \n",
              "2 -299.933685  118.578461   8.348220  25.962524 -16.300257 -1.788243   \n",
              "3 -280.343048  118.607193   9.081362  29.117228 -17.677935  0.041437   \n",
              "4 -292.558380  121.191017   7.017522  22.656330 -19.091734 -3.386593   \n",
              "\n",
              "           6          7          8         9  ...        50        51  \\\n",
              "0 -24.045542  -7.715221 -16.647551 -4.126383  ...  4.785914  6.822370   \n",
              "1 -11.588456 -10.764145  -9.177705 -5.017083  ...  3.079358  4.527467   \n",
              "2 -24.209568  -9.280386 -15.846799 -4.361415  ...  4.882883  6.965629   \n",
              "3 -24.069937  -7.778329 -16.729486 -4.217350  ...  4.734492  6.781846   \n",
              "4 -26.960073  -7.652481 -17.392126 -0.461076  ...  5.955528  6.064217   \n",
              "\n",
              "         52        53        54        55        56        57  labels  gender  \n",
              "0  6.465144  5.040742  4.462775  4.019160  3.692048  3.415411   happy    male  \n",
              "1  5.122600  4.041961  2.732871  2.176067  2.955910  2.600446   happy    male  \n",
              "2  6.520880  5.417891  4.888678  3.816338  3.659878  3.295839   happy    male  \n",
              "3  6.476598  5.069869  4.473549  4.050447  3.740353  3.456593   happy    male  \n",
              "4  4.393935  4.429975  4.463602  4.980473  4.334596  4.759656   happy    male  \n",
              "\n",
              "[5 rows x 60 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a43d896f-59c0-44aa-b9ae-a65632b39717\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>50</th>\n",
              "      <th>51</th>\n",
              "      <th>52</th>\n",
              "      <th>53</th>\n",
              "      <th>54</th>\n",
              "      <th>55</th>\n",
              "      <th>56</th>\n",
              "      <th>57</th>\n",
              "      <th>labels</th>\n",
              "      <th>gender</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-280.558350</td>\n",
              "      <td>118.419098</td>\n",
              "      <td>8.925080</td>\n",
              "      <td>29.063490</td>\n",
              "      <td>-17.713118</td>\n",
              "      <td>0.083584</td>\n",
              "      <td>-24.045542</td>\n",
              "      <td>-7.715221</td>\n",
              "      <td>-16.647551</td>\n",
              "      <td>-4.126383</td>\n",
              "      <td>...</td>\n",
              "      <td>4.785914</td>\n",
              "      <td>6.822370</td>\n",
              "      <td>6.465144</td>\n",
              "      <td>5.040742</td>\n",
              "      <td>4.462775</td>\n",
              "      <td>4.019160</td>\n",
              "      <td>3.692048</td>\n",
              "      <td>3.415411</td>\n",
              "      <td>happy</td>\n",
              "      <td>male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-138.495236</td>\n",
              "      <td>53.219675</td>\n",
              "      <td>19.017487</td>\n",
              "      <td>4.935156</td>\n",
              "      <td>-4.009660</td>\n",
              "      <td>-8.325881</td>\n",
              "      <td>-11.588456</td>\n",
              "      <td>-10.764145</td>\n",
              "      <td>-9.177705</td>\n",
              "      <td>-5.017083</td>\n",
              "      <td>...</td>\n",
              "      <td>3.079358</td>\n",
              "      <td>4.527467</td>\n",
              "      <td>5.122600</td>\n",
              "      <td>4.041961</td>\n",
              "      <td>2.732871</td>\n",
              "      <td>2.176067</td>\n",
              "      <td>2.955910</td>\n",
              "      <td>2.600446</td>\n",
              "      <td>happy</td>\n",
              "      <td>male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-299.933685</td>\n",
              "      <td>118.578461</td>\n",
              "      <td>8.348220</td>\n",
              "      <td>25.962524</td>\n",
              "      <td>-16.300257</td>\n",
              "      <td>-1.788243</td>\n",
              "      <td>-24.209568</td>\n",
              "      <td>-9.280386</td>\n",
              "      <td>-15.846799</td>\n",
              "      <td>-4.361415</td>\n",
              "      <td>...</td>\n",
              "      <td>4.882883</td>\n",
              "      <td>6.965629</td>\n",
              "      <td>6.520880</td>\n",
              "      <td>5.417891</td>\n",
              "      <td>4.888678</td>\n",
              "      <td>3.816338</td>\n",
              "      <td>3.659878</td>\n",
              "      <td>3.295839</td>\n",
              "      <td>happy</td>\n",
              "      <td>male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-280.343048</td>\n",
              "      <td>118.607193</td>\n",
              "      <td>9.081362</td>\n",
              "      <td>29.117228</td>\n",
              "      <td>-17.677935</td>\n",
              "      <td>0.041437</td>\n",
              "      <td>-24.069937</td>\n",
              "      <td>-7.778329</td>\n",
              "      <td>-16.729486</td>\n",
              "      <td>-4.217350</td>\n",
              "      <td>...</td>\n",
              "      <td>4.734492</td>\n",
              "      <td>6.781846</td>\n",
              "      <td>6.476598</td>\n",
              "      <td>5.069869</td>\n",
              "      <td>4.473549</td>\n",
              "      <td>4.050447</td>\n",
              "      <td>3.740353</td>\n",
              "      <td>3.456593</td>\n",
              "      <td>happy</td>\n",
              "      <td>male</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-292.558380</td>\n",
              "      <td>121.191017</td>\n",
              "      <td>7.017522</td>\n",
              "      <td>22.656330</td>\n",
              "      <td>-19.091734</td>\n",
              "      <td>-3.386593</td>\n",
              "      <td>-26.960073</td>\n",
              "      <td>-7.652481</td>\n",
              "      <td>-17.392126</td>\n",
              "      <td>-0.461076</td>\n",
              "      <td>...</td>\n",
              "      <td>5.955528</td>\n",
              "      <td>6.064217</td>\n",
              "      <td>4.393935</td>\n",
              "      <td>4.429975</td>\n",
              "      <td>4.463602</td>\n",
              "      <td>4.980473</td>\n",
              "      <td>4.334596</td>\n",
              "      <td>4.759656</td>\n",
              "      <td>happy</td>\n",
              "      <td>male</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 60 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a43d896f-59c0-44aa-b9ae-a65632b39717')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a43d896f-59c0-44aa-b9ae-a65632b39717 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a43d896f-59c0-44aa-b9ae-a65632b39717');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-eccd6430-3956-478b-a17d-8c421d4c58f4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eccd6430-3956-478b-a17d-8c421d4c58f4')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-eccd6430-3956-478b-a17d-8c421d4c58f4 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "\n",
        "\n",
        "# Add a column to track gender\n",
        "male[\"gender\"] = \"male\"\n",
        "female[\"gender\"] = \"female\"\n",
        "\n",
        "# Merge them\n",
        "df = pd.concat([male, female], ignore_index=True)\n",
        "\n",
        "print(df.shape)\n",
        "df.head()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uZPpnYYJcFwF",
        "outputId": "5f406453-3e37-407d-ef08-88e1ce287943"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(85134, 60)\n",
            "['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] ...\n",
            "labels\n",
            "happy       13461\n",
            "fear        13461\n",
            "disgust     13461\n",
            "angry       13461\n",
            "sad         13461\n",
            "neutral     11921\n",
            "surprise     4564\n",
            "calm         1344\n",
            "Name: count, dtype: int64\n",
            "gender\n",
            "female    49224\n",
            "male      35910\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "df = pd.concat([male, female], ignore_index=True)\n",
        "\n",
        "# Basic sanity\n",
        "print(df.shape)\n",
        "print(df.columns.tolist()[:10], \"...\")  # peek columns\n",
        "print(df[\"labels\"].value_counts())\n",
        "print(df[\"gender\"].value_counts())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vxpqnpdufXBF",
        "outputId": "bbb97e10-b65a-4dd4-873c-9698a1b25480"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((68107, 59), (17027, 59))"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Separate X / y\n",
        "y = df[\"labels\"].astype(str)\n",
        "X = df.drop(columns=[\"labels\"])\n",
        "\n",
        "# Optionally one-hot encode gender (keeps it numeric)\n",
        "X = pd.get_dummies(X, columns=[\"gender\"], drop_first=True)\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.20, random_state=42, stratify=y\n",
        ")\n",
        "\n",
        "X_train.shape, X_test.shape\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OAlZUtTOfXWG",
        "outputId": "6eca89b0-da0a-4e42-88e5-d79bdaabc4f8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== Logistic Regression ===\n",
            "Accuracy: 0.4785340929112586\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "       angry       0.59      0.61      0.60      2692\n",
            "        calm       0.29      0.94      0.44       269\n",
            "     disgust       0.45      0.36      0.40      2692\n",
            "        fear       0.43      0.34      0.38      2692\n",
            "       happy       0.43      0.31      0.36      2693\n",
            "     neutral       0.49      0.50      0.49      2384\n",
            "         sad       0.52      0.58      0.55      2692\n",
            "    surprise       0.45      0.80      0.58       913\n",
            "\n",
            "    accuracy                           0.48     17027\n",
            "   macro avg       0.46      0.56      0.48     17027\n",
            "weighted avg       0.48      0.48      0.47     17027\n",
            "\n",
            "\n",
            "=== Random Forest ===\n",
            "Accuracy: 0.8789569507253187\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "       angry       0.87      0.94      0.90      2692\n",
            "        calm       0.90      0.91      0.91       269\n",
            "     disgust       0.88      0.83      0.85      2692\n",
            "        fear       0.94      0.82      0.88      2692\n",
            "       happy       0.88      0.86      0.87      2693\n",
            "     neutral       0.86      0.89      0.87      2384\n",
            "         sad       0.83      0.91      0.87      2692\n",
            "    surprise       0.97      0.96      0.96       913\n",
            "\n",
            "    accuracy                           0.88     17027\n",
            "   macro avg       0.89      0.89      0.89     17027\n",
            "weighted avg       0.88      0.88      0.88     17027\n",
            "\n"
          ]
        }
      ],
      "source": [
        "from sklearn.pipeline import make_pipeline\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import classification_report, accuracy_score, confusion_matrix\n",
        "\n",
        "# a) Logistic Regression (good for interpretability)\n",
        "logit = make_pipeline(\n",
        "    StandardScaler(with_mean=False),  # sparse-safe & fast; works fine for numeric\n",
        "    LogisticRegression(max_iter=200, n_jobs=-1, class_weight=\"balanced\")\n",
        ")\n",
        "logit.fit(X_train, y_train)\n",
        "y_pred_logit = logit.predict(X_test)\n",
        "\n",
        "print(\"=== Logistic Regression ===\")\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred_logit))\n",
        "print(classification_report(y_test, y_pred_logit))\n",
        "\n",
        "# b) Random Forest (robust non-linear baseline)\n",
        "rf = RandomForestClassifier(\n",
        "    n_estimators=200, random_state=42, class_weight=\"balanced_subsample\", n_jobs=-1\n",
        ")\n",
        "rf.fit(X_train, y_train)\n",
        "y_pred_rf = rf.predict(X_test)\n",
        "\n",
        "print(\"\\n=== Random Forest ===\")\n",
        "print(\"Accuracy:\", accuracy_score(y_test, y_pred_rf))\n",
        "print(classification_report(y_test, y_pred_rf))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 537
        },
        "id": "UPWPzmJkgxHG",
        "outputId": "8318852a-1838-4d4e-a54e-53d6c8d5ff41"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   feature  importance\n",
              "0        0    0.075299\n",
              "1        3    0.029874\n",
              "2        2    0.028857\n",
              "3        1    0.027636\n",
              "4       17    0.026679\n",
              "5        5    0.024314\n",
              "6       10    0.023686\n",
              "7       12    0.022473\n",
              "8        4    0.021283\n",
              "9       36    0.020764\n",
              "10      11    0.019871\n",
              "11      19    0.019605\n",
              "12      35    0.019477\n",
              "13      22    0.019022\n",
              "14      21    0.018910"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c8864373-c1ca-472d-a1c9-4fc51d5e6f8f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature</th>\n",
              "      <th>importance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0.075299</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3</td>\n",
              "      <td>0.029874</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>0.028857</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0.027636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>17</td>\n",
              "      <td>0.026679</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5</td>\n",
              "      <td>0.024314</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>10</td>\n",
              "      <td>0.023686</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>12</td>\n",
              "      <td>0.022473</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>4</td>\n",
              "      <td>0.021283</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>36</td>\n",
              "      <td>0.020764</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>11</td>\n",
              "      <td>0.019871</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>19</td>\n",
              "      <td>0.019605</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>35</td>\n",
              "      <td>0.019477</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>22</td>\n",
              "      <td>0.019022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>21</td>\n",
              "      <td>0.018910</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c8864373-c1ca-472d-a1c9-4fc51d5e6f8f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c8864373-c1ca-472d-a1c9-4fc51d5e6f8f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c8864373-c1ca-472d-a1c9-4fc51d5e6f8f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-2276a804-6645-4e30-ad10-8c9cf13a6ec3\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2276a804-6645-4e30-ad10-8c9cf13a6ec3')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-2276a804-6645-4e30-ad10-8c9cf13a6ec3 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_d303a5b4-f83c-4cb4-b102-e807264fb384\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('top_feats')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d303a5b4-f83c-4cb4-b102-e807264fb384 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('top_feats');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "top_feats",
              "summary": "{\n  \"name\": \"top_feats\",\n  \"rows\": 15,\n  \"fields\": [\n    {\n      \"column\": \"feature\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 15,\n        \"samples\": [\n          \"36\",\n          \"19\",\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"importance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.013997358777338657,\n        \"min\": 0.0189101010942153,\n        \"max\": 0.07529910532872176,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          0.02076391864116906,\n          0.019605411397257893,\n          0.07529910532872176\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "WARNING: Runtime no longer has a reference to this dataframe, please re-run this cell and try again.\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "importances = rf.feature_importances_\n",
        "feat_names = np.array(X_train.columns)\n",
        "idx = np.argsort(importances)[::-1][:15]\n",
        "\n",
        "top_feats = pd.DataFrame({\n",
        "    \"feature\": feat_names[idx],\n",
        "    \"importance\": importances[idx]\n",
        "})\n",
        "top_feats\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "Ui-GIGqi5deu",
        "outputId": "00d56516-ba73-4f61-b97a-201eb51b6b88"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# @title importance\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "top_feats['importance'].plot(kind='hist', bins=20, title='importance')\n",
        "plt.gca().spines[['top', 'right',]].set_visible(False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 381
        },
        "id": "dIPKhmskg_fq",
        "outputId": "a071094a-2262-4a18-cd73-7c20a227365f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  feature    weight\n",
              "0       0  1.333585\n",
              "1       2 -0.837209\n",
              "2      33 -0.409083\n",
              "3       4 -0.408465\n",
              "4      35 -0.397385\n",
              "5       8 -0.396559\n",
              "6      38 -0.395831\n",
              "7       6  0.383808\n",
              "8      36  0.291669\n",
              "9      27  0.281797"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-50af1832-a567-48be-be8a-4ed4477dbeee\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature</th>\n",
              "      <th>weight</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1.333585</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>-0.837209</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>33</td>\n",
              "      <td>-0.409083</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>-0.408465</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>35</td>\n",
              "      <td>-0.397385</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>8</td>\n",
              "      <td>-0.396559</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>38</td>\n",
              "      <td>-0.395831</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>6</td>\n",
              "      <td>0.383808</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>36</td>\n",
              "      <td>0.291669</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>27</td>\n",
              "      <td>0.281797</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-50af1832-a567-48be-be8a-4ed4477dbeee')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-50af1832-a567-48be-be8a-4ed4477dbeee button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-50af1832-a567-48be-be8a-4ed4477dbeee');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7745a5a0-61f8-475e-9c40-2602827310c0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7745a5a0-61f8-475e-9c40-2602827310c0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7745a5a0-61f8-475e-9c40-2602827310c0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"per_class_top[classes[0]]  # peek one class\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"feature\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"36\",\n          \"2\",\n          \"8\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6295104287006277,\n        \"min\": -0.8372086605560173,\n        \"max\": 1.3335851459877064,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          0.291668535913581,\n          -0.8372086605560173,\n          -0.39655861858452274\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "WARNING: Runtime no longer has a reference to this dataframe, please re-run this cell and try again.\n"
          ]
        }
      ],
      "source": [
        "# Pull the logistic regression step from the pipeline\n",
        "logit_clf = logit.named_steps['logisticregression']\n",
        "scaler    = logit.named_steps['standardscaler']\n",
        "\n",
        "classes = logit_clf.classes_\n",
        "coefs = logit_clf.coef_  # shape: [n_classes, n_features]\n",
        "\n",
        "# Build nice per-class tables\n",
        "per_class_top = {}\n",
        "for cls, row in zip(classes, coefs):\n",
        "    order = np.argsort(np.abs(row))[::-1][:10]\n",
        "    per_class_top[cls] = pd.DataFrame({\n",
        "        \"feature\": X_train.columns[order],\n",
        "        \"weight\": row[order]\n",
        "    })\n",
        "\n",
        "per_class_top[classes[0]]  # peek one class\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MBPzor73hKeU",
        "outputId": "145619ac-7cbe-4de7-f846-2f954a0287fc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== Random Forest overall signals ===\n",
            "• MFCC_0 had notable influence (importance=0.075).\n",
            "• MFCC_3 had notable influence (importance=0.030).\n",
            "• MFCC_2 had notable influence (importance=0.029).\n",
            "• MFCC_1 had notable influence (importance=0.028).\n",
            "• MFCC_17 had notable influence (importance=0.027).\n",
            "• MFCC_5 had notable influence (importance=0.024).\n",
            "• MFCC_10 had notable influence (importance=0.024).\n",
            "• MFCC_12 had notable influence (importance=0.022).\n",
            "\n",
            "=== Per-emotion patterns (Logistic) ===\n",
            "For class 'angry': higher values in [MFCC_0, MFCC_6, MFCC_36, MFCC_27, MFCC_38] increased the odds, while higher values in [MFCC_2, MFCC_33, MFCC_4, MFCC_35, MFCC_8] decreased the odds.\n",
            "\n",
            "For class 'calm': higher values in [MFCC_8, MFCC_13, MFCC_30, gender male, MFCC_47] increased the odds, while higher values in [MFCC_0, MFCC_1, MFCC_3, MFCC_22, MFCC_39] decreased the odds.\n",
            "\n",
            "For class 'disgust': higher values in [MFCC_10, MFCC_11, MFCC_1, MFCC_43, MFCC_36] increased the odds, while higher values in [MFCC_35, MFCC_32, MFCC_25, MFCC_21, MFCC_37] decreased the odds.\n",
            "\n",
            "For class 'fear': higher values in [MFCC_0, MFCC_5, MFCC_19, MFCC_12, MFCC_47] increased the odds, while higher values in [MFCC_10, MFCC_36, MFCC_11, MFCC_17, MFCC_42] decreased the odds.\n",
            "\n",
            "For class 'happy': higher values in [MFCC_1, MFCC_0, MFCC_38, MFCC_17, MFCC_22] increased the odds, while higher values in [MFCC_37, MFCC_2, MFCC_9, MFCC_27, MFCC_23] decreased the odds.\n",
            "\n",
            "For class 'neutral': higher values in [MFCC_3, MFCC_1, MFCC_14, MFCC_11, MFCC_12] increased the odds, while higher values in [MFCC_7, MFCC_24, MFCC_29, MFCC_2, MFCC_36] decreased the odds.\n",
            "\n",
            "For class 'sad': higher values in [MFCC_3, MFCC_39, MFCC_2, MFCC_5, MFCC_30] increased the odds, while higher values in [MFCC_0, MFCC_29, MFCC_19, MFCC_20, MFCC_11] decreased the odds.\n",
            "\n",
            "For class 'surprise': higher values in [gender male, MFCC_38, MFCC_41, MFCC_34, MFCC_16] increased the odds, while higher values in [MFCC_3, MFCC_10, MFCC_4, MFCC_11, MFCC_25] decreased the odds.\n"
          ]
        }
      ],
      "source": [
        "def humanize_feature_name(name: str):\n",
        "    \"\"\"\n",
        "    If your columns are plain indices (0,1,2...), leave as 'MFCC_0' etc.\n",
        "    If you later rename them (e.g., 'mfcc_0','zcr','rms'), this function can map nicer text.\n",
        "    \"\"\"\n",
        "    try:\n",
        "        i = int(name)\n",
        "        return f\"MFCC_{i}\"\n",
        "    except:\n",
        "        return name.replace(\"_\", \" \")\n",
        "\n",
        "def summarize_rf_top(top_df, N=8):\n",
        "    lines = []\n",
        "    for i, row in top_df.head(N).iterrows():\n",
        "        fname = humanize_feature_name(str(row['feature']))\n",
        "        lines.append(f\"• {fname} had notable influence (importance={row['importance']:.3f}).\")\n",
        "    return \"\\n\".join(lines)\n",
        "\n",
        "def summarize_logit_per_class(per_class_dict, N=5):\n",
        "    out = []\n",
        "    for cls, tbl in per_class_dict.items():\n",
        "        pos = tbl.sort_values(\"weight\", ascending=False).head(N)\n",
        "        neg = tbl.sort_values(\"weight\", ascending=True).head(N)\n",
        "        pos_txt = \", \".join(humanize_feature_name(str(f)) for f in pos[\"feature\"].tolist())\n",
        "        neg_txt = \", \".join(humanize_feature_name(str(f)) for f in neg[\"feature\"].tolist())\n",
        "        out.append(\n",
        "            f\"For class '{cls}': higher values in [{pos_txt}] increased the odds, \"\n",
        "            f\"while higher values in [{neg_txt}] decreased the odds.\"\n",
        "        )\n",
        "    return \"\\n\\n\".join(out)\n",
        "\n",
        "print(\"=== Random Forest overall signals ===\")\n",
        "print(summarize_rf_top(top_feats, N=8))\n",
        "\n",
        "print(\"\\n=== Per-emotion patterns (Logistic) ===\")\n",
        "print(summarize_logit_per_class(per_class_top, N=5))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ac_PwtLjhUsP",
        "outputId": "6d021fda-bd9c-4e3e-8520-d3937015e6c7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Male-only RF accuracy: 0.8478139793929268\n",
            "Female-only RF accuracy: 0.9111223971559167\n"
          ]
        }
      ],
      "source": [
        "def train_eval_subset(df_sub):\n",
        "    y = df_sub[\"labels\"].astype(str)\n",
        "    X = df_sub.drop(columns=[\"labels\"])\n",
        "    if \"gender\" in X.columns:\n",
        "        X = pd.get_dummies(X, columns=[\"gender\"], drop_first=True)\n",
        "    X_tr, X_te, y_tr, y_te = train_test_split(\n",
        "        X, y, test_size=0.20, random_state=42, stratify=y\n",
        "    )\n",
        "    model = RandomForestClassifier(n_estimators=200, random_state=42, class_weight='balanced_subsample', n_jobs=-1)\n",
        "    model.fit(X_tr, y_tr)\n",
        "    return model, X_tr, X_te, y_te\n",
        "\n",
        "rf_male, Xm_tr, Xm_te, ym_te = train_eval_subset(df[df[\"gender\"]==\"male\"])\n",
        "rf_fem,  Xf_tr, Xf_te, yf_te = train_eval_subset(df[df[\"gender\"]==\"female\"])\n",
        "\n",
        "print(\"Male-only RF accuracy:\", accuracy_score(ym_te, rf_male.predict(Xm_te)))\n",
        "print(\"Female-only RF accuracy:\", accuracy_score(yf_te, rf_fem.predict(Xf_te)))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bai882RyixXK",
        "outputId": "438a6658-172d-4a95-92a4-27d1e6de1697"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved: ['rf_top_features.csv', 'logit_top_weights_angry.csv', 'logit_top_weights_calm.csv', 'logit_top_weights_disgust.csv', 'logit_top_weights_fear.csv', 'logit_top_weights_happy.csv', 'logit_top_weights_neutral.csv', 'logit_top_weights_sad.csv', 'logit_top_weights_surprise.csv']\n"
          ]
        }
      ],
      "source": [
        "out_dir = \"/content/drive/My Drive/ser/outputs/\"\n",
        "import os\n",
        "os.makedirs(out_dir, exist_ok=True)\n",
        "\n",
        "top_feats.to_csv(out_dir + \"rf_top_features.csv\", index=False)\n",
        "for cls, tbl in per_class_top.items():\n",
        "    tbl.to_csv(out_dir + f\"logit_top_weights_{cls}.csv\", index=False)\n",
        "\n",
        "print(\"Saved:\", os.listdir(out_dir))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CIAnY-6ywUfe",
        "outputId": "18908deb-8571-47a6-fe3f-e895fdcce795"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best (small) params: {'n_estimators': 400, 'min_samples_split': 2, 'min_samples_leaf': 1, 'max_features': 'sqrt', 'max_depth': 30}\n",
            "Full-train accuracy: 0.8811299700475715\n"
          ]
        }
      ],
      "source": [
        "# 1) make a small stratified slice of the TRAIN set\n",
        "from sklearn.model_selection import StratifiedShuffleSplit\n",
        "sss = StratifiedShuffleSplit(n_splits=1, test_size=0.8, random_state=42)  # keep 20% of X_train\n",
        "idx_small,_ = next(sss.split(X_train, y_train))\n",
        "X_small, y_small = X_train.iloc[idx_small], y_train.iloc[idx_small]\n",
        "\n",
        "# 2) randomized search on the tiny slice\n",
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "param_dist = {\n",
        "    \"n_estimators\":[200,400,600],\n",
        "    \"max_depth\":[None,30],\n",
        "    \"min_samples_split\":[2,5],\n",
        "    \"min_samples_leaf\":[1,2],\n",
        "    \"max_features\":[\"sqrt\"]  # fixes feature subsampling; faster and usually strong\n",
        "}\n",
        "rf = RandomForestClassifier(random_state=42, class_weight=\"balanced_subsample\", n_jobs=-1)\n",
        "rand = RandomizedSearchCV(rf, param_dist, n_iter=8, cv=2, scoring=\"f1_weighted\", n_jobs=-1, random_state=42)\n",
        "rand.fit(X_small, y_small)\n",
        "print(\"Best (small) params:\", rand.best_params_)\n",
        "\n",
        "# 3) retrain BEST model on the FULL training set\n",
        "best = RandomForestClassifier(**rand.best_params_, random_state=42, class_weight=\"balanced_subsample\", n_jobs=-1)\n",
        "best.fit(X_train, y_train)\n",
        "print(\"Full-train accuracy:\", best.score(X_test, y_test))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 835
        },
        "id": "f4GU9cNq19Gq",
        "outputId": "226a8048-bf6d-4790-8e11-63f0475ead2a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "       angry      0.868     0.941     0.903      2692\n",
            "        calm      0.892     0.922     0.907       269\n",
            "     disgust      0.887     0.832     0.859      2692\n",
            "        fear      0.942     0.825     0.880      2692\n",
            "       happy      0.881     0.862     0.871      2693\n",
            "     neutral      0.859     0.889     0.873      2384\n",
            "         sad      0.832     0.909     0.868      2692\n",
            "    surprise      0.968     0.961     0.964       913\n",
            "\n",
            "    accuracy                          0.881     17027\n",
            "   macro avg      0.891     0.892     0.891     17027\n",
            "weighted avg      0.883     0.881     0.881     17027\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "import seaborn as sns, matplotlib.pyplot as plt\n",
        "\n",
        "y_pred = best.predict(X_test)\n",
        "print(classification_report(y_test, y_pred, digits=3))\n",
        "\n",
        "cm = confusion_matrix(y_test, y_pred, labels=best.classes_)\n",
        "plt.figure(figsize=(7,6))\n",
        "sns.heatmap(cm, annot=False, cmap=\"Blues\",\n",
        "            xticklabels=best.classes_, yticklabels=best.classes_)\n",
        "plt.xlabel(\"Predicted\"); plt.ylabel(\"True\"); plt.title(\"Confusion Matrix\"); plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3S4skabf2C_X",
        "outputId": "8cd5c6e1-808f-4094-eee5-229add15b336"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Male-only: 0.8521303258145363\n",
            "Female-only: 0.9105129507364145\n",
            "Train male → test female: 0.27880708597432147\n",
            "Train female → test male: 0.33238652186020606\n"
          ]
        }
      ],
      "source": [
        "male_only   = df[df['gender']=='male']\n",
        "female_only = df[df['gender']=='female']\n",
        "\n",
        "def fit_eval(sub):\n",
        "    y=sub['labels']; X=pd.get_dummies(sub.drop(columns=['labels']), columns=['gender'], drop_first=True)\n",
        "    Xtr,Xte,ytr,yte=train_test_split(X,y,test_size=0.2,random_state=42,stratify=y)\n",
        "    m=RandomForestClassifier(**best.get_params()); m.fit(Xtr,ytr)\n",
        "    return m.score(Xte,yte)\n",
        "\n",
        "print(\"Male-only:\", fit_eval(male_only))\n",
        "print(\"Female-only:\", fit_eval(female_only))\n",
        "\n",
        "# Train on male, test on female (and reverse)\n",
        "def train_on_A_test_on_B(A,B):\n",
        "    yA=A['labels']; XA=pd.get_dummies(A.drop(columns=['labels']), columns=['gender'], drop_first=True)\n",
        "    yB=B['labels']; XB=pd.get_dummies(B.drop(columns=['labels']), columns=['gender'], drop_first=True).reindex(columns=XA.columns, fill_value=0)\n",
        "    m=RandomForestClassifier(**best.get_params()); m.fit(XA,yA)\n",
        "    from sklearn.metrics import accuracy_score\n",
        "    return accuracy_score(yB, m.predict(XB))\n",
        "\n",
        "print(\"Train male → test female:\", train_on_A_test_on_B(male_only,female_only))\n",
        "print(\"Train female → test male:\", train_on_A_test_on_B(female_only,male_only))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QCBZebFQ2OWP",
        "outputId": "dcf4063a-5005-4a51-aad0-ecd942731148"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CV mean±sd: 0.8803885263150335 0.0018524854729307268\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import StratifiedKFold\n",
        "import numpy as np\n",
        "skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
        "accs=[]\n",
        "for tr, te in skf.split(X, y):\n",
        "    m=RandomForestClassifier(**best.get_params()); m.fit(X.iloc[tr], y.iloc[tr])\n",
        "    accs.append(m.score(X.iloc[te], y.iloc[te]))\n",
        "print(\"CV mean±sd:\", np.mean(accs), np.std(accs))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ncPsECOgGvYD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0c11d858-233d-451a-c38f-c6d137c75f67"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Row‑wise z-score accuracy: 0.8691489986492043\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# 1) pick feature columns\n",
        "feat_cols = [c for c in df.columns if c not in [\"labels\",\"gender\"]]\n",
        "\n",
        "# 2) row-wise z-score: (x - row_mean)/row_std\n",
        "X_feats = df[feat_cols]\n",
        "row_mean = X_feats.mean(axis=1)\n",
        "row_std  = X_feats.std(axis=1) + 1e-8\n",
        "X_rowz   = (X_feats.sub(row_mean, axis=0)).div(row_std, axis=0)\n",
        "\n",
        "# 3) rebuild X with gender (one-hot)\n",
        "X = pd.concat([X_rowz, pd.get_dummies(df[\"gender\"], prefix=\"gender\", drop_first=True)], axis=1)\n",
        "y = df[\"labels\"].astype(str)\n",
        "\n",
        "# 4) split + train with your tuned params\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,\n",
        "                                                    random_state=42, stratify=y)\n",
        "best = RandomForestClassifier(\n",
        "    n_estimators=400, max_depth=30, max_features='sqrt',\n",
        "    min_samples_split=2, min_samples_leaf=1,\n",
        "    class_weight=\"balanced_subsample\", random_state=42, n_jobs=-1\n",
        ")\n",
        "best.fit(X_train, y_train)\n",
        "print(\"Row‑wise z-score accuracy:\", accuracy_score(y_test, best.predict(X_test)))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "H6GMDKRZIbkz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "45cce9c0-988a-4356-ff27-ff57502233bc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "male→female: 0.2659881358686819\n",
            "female→male: 0.3025341130604289\n"
          ]
        }
      ],
      "source": [
        "def prep(df_sub):\n",
        "    feats = [c for c in df_sub.columns if c not in [\"labels\",\"gender\"]]\n",
        "    Xm = df_sub[feats]\n",
        "    rm = Xm.mean(axis=1); rs = Xm.std(axis=1)+1e-8\n",
        "    Xz = (Xm.sub(rm, axis=0)).div(rs, axis=0)\n",
        "    Xz = pd.concat([Xz, pd.get_dummies(df_sub[\"gender\"], prefix=\"gender\", drop_first=True)], axis=1)\n",
        "    y  = df_sub[\"labels\"].astype(str)\n",
        "    return Xz, y\n",
        "\n",
        "male_df   = df[df[\"gender\"]==\"male\"].copy()\n",
        "female_df = df[df[\"gender\"]==\"female\"].copy()\n",
        "\n",
        "Xm, ym = prep(male_df)\n",
        "Xf, yf = prep(female_df)\n",
        "\n",
        "# Train male → test female\n",
        "m = RandomForestClassifier(n_estimators=400, max_depth=30, max_features='sqrt',\n",
        "                           min_samples_split=2, min_samples_leaf=1,\n",
        "                           class_weight=\"balanced_subsample\", random_state=42, n_jobs=-1)\n",
        "m.fit(Xm, ym)\n",
        "from sklearn.metrics import accuracy_score\n",
        "print(\"male→female:\", accuracy_score(yf, m.predict(Xf)))\n",
        "\n",
        "# Train female → test male\n",
        "f = RandomForestClassifier(n_estimators=400, max_depth=30, max_features='sqrt',\n",
        "                           min_samples_split=2, min_samples_leaf=1,\n",
        "                           class_weight=\"balanced_subsample\", random_state=42, n_jobs=-1)\n",
        "f.fit(Xf, yf)\n",
        "print(\"female→male:\", accuracy_score(ym, f.predict(Xm)))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kwDlao0wUIbC"
      },
      "outputs": [],
      "source": [
        "!pip -q install lightgbm xgboost\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "aVBoOJmCUgng"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# assumes you already have df with columns: 59 numeric features + 'labels' + 'gender'\n",
        "feat_cols = [c for c in df.columns if c not in [\"labels\",\"gender\"]]\n",
        "\n",
        "X_feats = df[feat_cols]\n",
        "row_mean = X_feats.mean(axis=1); row_std = X_feats.std(axis=1) + 1e-8\n",
        "Xz = (X_feats.sub(row_mean, axis=0)).div(row_std, axis=0)\n",
        "\n",
        "X_full = pd.concat([Xz, pd.get_dummies(df[\"gender\"], prefix=\"gender\", drop_first=True)], axis=1)\n",
        "y_full = df[\"labels\"].astype(str)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "egqph9zIU3Tp"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "def split_xy(X, y, test_size=0.2, seed=42):\n",
        "    return train_test_split(X, y, test_size=test_size, stratify=y, random_state=seed)\n",
        "\n",
        "def prep_subset(dsub: pd.DataFrame):\n",
        "    feats = [c for c in dsub.columns if c not in [\"labels\",\"gender\"]]\n",
        "    Xm = dsub[feats]\n",
        "    rm = Xm.mean(axis=1); rs = Xm.std(axis=1) + 1e-8\n",
        "    Xz = (Xm.sub(rm, axis=0)).div(rs, axis=0)\n",
        "    Xz = pd.concat([Xz, pd.get_dummies(dsub[\"gender\"], prefix=\"gender\", drop_first=True)], axis=1)\n",
        "    y  = dsub[\"labels\"].astype(str)\n",
        "    return Xz, y\n",
        "\n",
        "male_df   = df[df[\"gender\"]==\"male\"].copy()\n",
        "female_df = df[df[\"gender\"]==\"female\"].copy()\n",
        "\n",
        "Xm, ym = prep_subset(male_df)\n",
        "Xf, yf = prep_subset(female_df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Qq_AJwCqU91G"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "def split_xy(X, y, test_size=0.2, seed=42):\n",
        "    return train_test_split(X, y, test_size=test_size, stratify=y, random_state=seed)\n",
        "\n",
        "def prep_subset(dsub: pd.DataFrame):\n",
        "    feats = [c for c in dsub.columns if c not in [\"labels\",\"gender\"]]\n",
        "    Xm = dsub[feats]\n",
        "    rm = Xm.mean(axis=1); rs = Xm.std(axis=1) + 1e-8\n",
        "    Xz = (Xm.sub(rm, axis=0)).div(rs, axis=0)\n",
        "    Xz = pd.concat([Xz, pd.get_dummies(dsub[\"gender\"], prefix=\"gender\", drop_first=True)], axis=1)\n",
        "    y  = dsub[\"labels\"].astype(str)\n",
        "    return Xz, y\n",
        "\n",
        "male_df   = df[df[\"gender\"]==\"male\"].copy()\n",
        "female_df = df[df[\"gender\"]==\"female\"].copy()\n",
        "\n",
        "Xm, ym = prep_subset(male_df)\n",
        "Xf, yf = prep_subset(female_df)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vVzbL_22W4JK"
      },
      "outputs": [],
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from lightgbm import LGBMClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.pipeline import make_pipeline\n",
        "\n",
        "models = {\n",
        "    \"RF\": RandomForestClassifier(\n",
        "        n_estimators=400, max_depth=30, max_features='sqrt',\n",
        "        min_samples_split=2, min_samples_leaf=1,\n",
        "        class_weight=\"balanced_subsample\", random_state=42, n_jobs=-1\n",
        "    ),\n",
        "    \"LightGBM\": LGBMClassifier(\n",
        "        n_estimators=800, learning_rate=0.05,\n",
        "        num_leaves=63, subsample=0.8, colsample_bytree=0.8,\n",
        "        class_weight=\"balanced\", random_state=42\n",
        "    ),\n",
        "    \"SVM_RBF\": make_pipeline(StandardScaler(), SVC(kernel=\"rbf\", class_weight=\"balanced\"))\n",
        "}\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9GhhxSn04Ng7",
        "outputId": "d617c1a6-9fbf-4d61-e314-3d61f216fc44"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "LightGBM accuracy: 0.8400775239325776\n"
          ]
        }
      ],
      "source": [
        "import numpy as np, pandas as pd\n",
        "from lightgbm import LGBMClassifier\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# --- X, y from your row-wise z-scored setup ---\n",
        "feat_cols = [c for c in df.columns if c not in [\"labels\",\"gender\"]]\n",
        "X_feats = df[feat_cols]\n",
        "rm, rs = X_feats.mean(axis=1), X_feats.std(axis=1) + 1e-8\n",
        "Xz = (X_feats.sub(rm, axis=0)).div(rs, axis=0)\n",
        "X = pd.concat([Xz, pd.get_dummies(df[\"gender\"], prefix=\"gender\", drop_first=True)], axis=1)\n",
        "\n",
        "# 1) clean labels -> integers (LightGBM likes this)\n",
        "le = LabelEncoder()\n",
        "y = le.fit_transform(df[\"labels\"].astype(str))  # e.g., 0..K-1\n",
        "\n",
        "# 2) sanitize features\n",
        "X = X.replace([np.inf, -np.inf], np.nan).fillna(0.0)  # or .fillna(X.median())\n",
        "\n",
        "# 3) split\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, stratify=y, random_state=42\n",
        ")\n",
        "\n",
        "# 4) conservative LightGBM (fewer leaves, min gain/leaf)\n",
        "lgb = LGBMClassifier(\n",
        "    objective=\"multiclass\",\n",
        "    num_class=len(np.unique(y)),\n",
        "    n_estimators=600,\n",
        "    learning_rate=0.05,\n",
        "    num_leaves=31,          # smaller = smoother trees\n",
        "    max_depth=-1,           # let leaves control depth\n",
        "    min_data_in_leaf=40,    # more samples per leaf\n",
        "    min_gain_to_split=1e-3, # require tiny positive gain\n",
        "    subsample=0.8,\n",
        "    colsample_bytree=0.8,\n",
        "    class_weight=\"balanced\",\n",
        "    reg_alpha=0.0, reg_lambda=1.0,\n",
        "    random_state=42,\n",
        "    verbose=-1              # silence warnings\n",
        ")\n",
        "\n",
        "lgb.fit(X_train, y_train)\n",
        "pred = lgb.predict(X_test)\n",
        "print(\"LightGBM accuracy:\", accuracy_score(y_test, pred))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hDv-A2GIWpgD",
        "outputId": "b91ab403-b61c-4aec-b633-ac068f9ef354"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "XGBoost pooled test acc: 0.867\n",
            "XGBoost male-only:   0.850\n",
            "XGBoost female-only: 0.914\n",
            "XGBoost male→female: 0.266\n",
            "XGBoost female→male: 0.311\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "361"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ],
      "source": [
        "# ==== install + imports ====\n",
        "!pip -q install xgboost\n",
        "\n",
        "import numpy as np, pandas as pd, gc\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# ==== 0) (RE)LOAD DATAFRAME df ====\n",
        "# If you just reconnected, rebuild df from your CSVs:\n",
        "male = pd.read_csv(\"/content/drive/My Drive/Male_features.csv\"); male[\"gender\"]=\"male\"\n",
        "female = pd.read_csv(\"/content/drive/My Drive/Female_features.csv\"); female[\"gender\"]=\"female\"\n",
        "df = pd.concat([male, female], ignore_index=True)\n",
        "\n",
        "assert 'df' in globals(), \"Reload your CSVs and rebuild `df` before running.\"\n",
        "\n",
        "# ==== 1) Row-wise z-score (RAM-lean, float32) ====\n",
        "feat_cols = [c for c in df.columns if c not in [\"labels\",\"gender\"]]\n",
        "X = df[feat_cols].to_numpy(dtype=np.float32)\n",
        "y_text = df[\"labels\"].astype(str).to_numpy()\n",
        "g_num = (df[\"gender\"].to_numpy()==\"female\").astype(np.int8)\n",
        "\n",
        "rm = X.mean(axis=1, keepdims=True)\n",
        "rs = X.std(axis=1, keepdims=True) + 1e-8\n",
        "Xz = (X - rm) / rs  # float32\n",
        "\n",
        "# encode labels to 0..K-1 (needed for XGB multiclass)\n",
        "le = LabelEncoder()\n",
        "y = le.fit_transform(y_text)\n",
        "\n",
        "# helper to fit/eval one model\n",
        "def fit_eval_xgb(Xtr, ytr, Xte, yte, seed=42):\n",
        "    clf = XGBClassifier(\n",
        "        objective=\"multi:softmax\",\n",
        "        num_class=len(np.unique(y)),\n",
        "        tree_method=\"hist\",          # fast & memory-friendly (CPU); use \"gpu_hist\" if GPU is on\n",
        "        eval_metric=\"mlogloss\",\n",
        "        n_estimators=600,\n",
        "        learning_rate=0.05,\n",
        "        max_depth=8,\n",
        "        subsample=0.8,\n",
        "        colsample_bytree=0.8,\n",
        "        min_child_weight=5,          # regularize\n",
        "        reg_lambda=1.0,\n",
        "        random_state=seed,\n",
        "        n_jobs=-1\n",
        "    )\n",
        "    clf.fit(Xtr, ytr, eval_set=[(Xte, yte)], verbose=False)\n",
        "    return accuracy_score(yte, clf.predict(Xte)), clf\n",
        "\n",
        "# ==== 2) POOLED evaluation ====\n",
        "Xtr, Xte, ytr, yte = train_test_split(Xz, y, test_size=0.2, stratify=y, random_state=42)\n",
        "acc_pooled, xgb_pooled = fit_eval_xgb(Xtr, ytr, Xte, yte)\n",
        "print(f\"XGBoost pooled test acc: {acc_pooled:.3f}\")\n",
        "\n",
        "# ==== 3) WITHIN- and CROSS-gender ====\n",
        "male_idx   = (df[\"gender\"].to_numpy()==\"male\")\n",
        "female_idx = ~male_idx\n",
        "\n",
        "Xm, ym = Xz[male_idx],   y[male_idx]\n",
        "Xf, yf = Xz[female_idx], y[female_idx]\n",
        "\n",
        "# within male\n",
        "Xm_tr, Xm_te, ym_tr, ym_te = train_test_split(Xm, ym, test_size=0.2, stratify=ym, random_state=42)\n",
        "acc_male,   mdl_m = fit_eval_xgb(Xm_tr, ym_tr, Xm_te, ym_te)\n",
        "# within female\n",
        "Xf_tr, Xf_te, yf_tr, yf_te = train_test_split(Xf, yf, test_size=0.2, stratify=yf, random_state=42)\n",
        "acc_female, mdl_f = fit_eval_xgb(Xf_tr, yf_tr, Xf_te, yf_te)\n",
        "\n",
        "# cross: train on male, test on female; and reverse\n",
        "acc_m2f = accuracy_score(yf, mdl_m.predict(Xf))\n",
        "acc_f2m = accuracy_score(ym, mdl_f.predict(Xm))\n",
        "\n",
        "print(f\"XGBoost male-only:   {acc_male:.3f}\")\n",
        "print(f\"XGBoost female-only: {acc_female:.3f}\")\n",
        "print(f\"XGBoost male→female: {acc_m2f:.3f}\")\n",
        "print(f\"XGBoost female→male: {acc_f2m:.3f}\")\n",
        "\n",
        "# free a bit of memory\n",
        "del X, Xz, Xtr, Xte, Xm_tr, Xm_te, Xf_tr, Xf_te; gc.collect()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vItMErFFzJG4"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZX1Pzm-YzJXP"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DNPpkBwOzHwg"
      },
      "outputs": [],
      "source": [
        "!pip -q install lightgbm xgboost shap\n",
        "\n",
        "import os, gc, numpy as np, pandas as pd, matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split, StratifiedKFold\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, log_loss\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from lightgbm import LGBMClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.calibration import CalibratedClassifierCV\n",
        "import shap, joblib\n",
        "np.set_printoptions(precision=3, suppress=True)\n",
        "pd.set_option(\"display.width\", 140)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QL41Ny95zZ-9",
        "outputId": "90491ffe-6054-4d2c-a9e0-bc15672fb618"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(85134, 60) 8 classes | gender counts:\n",
            " gender\n",
            "female    49224\n",
            "male      35910\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "# Put your paths here or upload then read:\n",
        "male = pd.read_csv(\"/content/drive/My Drive/Male_features.csv\"); male[\"gender\"] = \"male\"\n",
        "female = pd.read_csv(\"/content/drive/My Drive/Female_features.csv\"); female[\"gender\"] = \"female\"\n",
        "df = pd.concat([male, female], ignore_index=True)\n",
        "\n",
        "assert 'df' in globals(), \"Reload df from your CSVs before running.\"\n",
        "\n",
        "# infer feature columns\n",
        "FEATS = [c for c in df.columns if c not in (\"labels\",\"gender\")]\n",
        "print(df.shape, df['labels'].nunique(), \"classes | gender counts:\\n\", df['gender'].value_counts())\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uCyn2zNn0X-h"
      },
      "outputs": [],
      "source": [
        "def row_z(X):  # per-sample z-score\n",
        "    X = X.astype(np.float32, copy=False)\n",
        "    m = X.mean(axis=1, keepdims=True); s = X.std(axis=1, keepdims=True) + 1e-8\n",
        "    return (X - m) / s\n",
        "\n",
        "def make_xy(d: pd.DataFrame):\n",
        "    X = d[FEATS].to_numpy(np.float32)\n",
        "    y_text = d[\"labels\"].astype(str).to_numpy()\n",
        "    Xz = row_z(X)\n",
        "    le = LabelEncoder()\n",
        "    y = le.fit_transform(y_text)\n",
        "    return Xz, y, le\n",
        "\n",
        "def rf_model():\n",
        "    return RandomForestClassifier(\n",
        "        n_estimators=400, max_depth=30, max_features='sqrt',\n",
        "        min_samples_split=2, min_samples_leaf=1,\n",
        "        class_weight=\"balanced_subsample\", random_state=42, n_jobs=-1\n",
        "    )\n",
        "\n",
        "def lgbm_model(num_class):\n",
        "    return LGBMClassifier(\n",
        "        objective=\"multiclass\", num_class=num_class,\n",
        "        n_estimators=600, learning_rate=0.05,\n",
        "        num_leaves=31, subsample=0.8, colsample_bytree=0.8,\n",
        "        min_data_in_leaf=40, min_gain_to_split=1e-3,\n",
        "        class_weight=\"balanced\", random_state=42, verbose=-1\n",
        "    )\n",
        "\n",
        "def xgb_model(num_class):\n",
        "    return XGBClassifier(\n",
        "        objective=\"multi:softmax\", num_class=num_class,\n",
        "        tree_method=\"hist\", eval_metric=\"mlogloss\",\n",
        "        n_estimators=600, learning_rate=0.05,\n",
        "        max_depth=8, subsample=0.8, colsample_bytree=0.8,\n",
        "        min_child_weight=5, reg_lambda=1.0, random_state=42, n_jobs=-1\n",
        "    )\n",
        "\n",
        "def eval_split(clf, X, y, test_size=0.2, seed=42, title=\"\"):\n",
        "    Xtr, Xte, ytr, yte = train_test_split(X, y, test_size=test_size, stratify=y, random_state=seed)\n",
        "    clf.fit(Xtr, ytr)\n",
        "    acc = accuracy_score(yte, clf.predict(Xte))\n",
        "    print(f\"{title} acc: {acc:.3f}\")\n",
        "    return acc, clf, (Xtr, Xte, ytr, yte)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WzBJRZVm0db1",
        "outputId": "223cb613-05e2-45c5-e2db-252eccdfbf69"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RF pooled acc: 0.866\n",
            "Router male-only acc  : 0.8405736563631301\n",
            "Router female-only acc: 0.8986287455561198\n"
          ]
        }
      ],
      "source": [
        "# Pooled baseline (RF)\n",
        "Xz, y, le = make_xy(df)\n",
        "acc_pooled, rf_pool, _ = eval_split(rf_model(), Xz, y, title=\"RF pooled\")\n",
        "\n",
        "# Gender-router (two models)\n",
        "male_df   = df[df.gender==\"male\"].copy()\n",
        "female_df = df[df.gender==\"female\"].copy()\n",
        "Xm, ym, _ = make_xy(male_df)\n",
        "Xf, yf, _ = make_xy(female_df)\n",
        "\n",
        "Xm_tr, Xm_te, ym_tr, ym_te = train_test_split(Xm, ym, test_size=0.2, stratify=ym, random_state=42)\n",
        "Xf_tr, Xf_te, yf_tr, yf_te = train_test_split(Xf, yf, test_size=0.2, stratify=yf, random_state=42)\n",
        "\n",
        "m_model = rf_model().fit(Xm_tr, ym_tr)\n",
        "f_model = rf_model().fit(Xf_tr, yf_tr)\n",
        "\n",
        "print(\"Router male-only acc  :\", accuracy_score(ym_te, m_model.predict(Xm_te)))\n",
        "print(\"Router female-only acc:\", accuracy_score(yf_te, f_model.predict(Xf_te)))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oOg-ozAqBpGA",
        "outputId": "8a59c5a7-34b4-4186-a8b6-dc9789e4bd94"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RF pooled (PCA-scrub k=1) acc: 0.876\n",
            "Dropped PCs: [0] corrs: [np.float64(-0.3)]\n",
            "RF pooled (PCA-scrub k=2) acc: 0.875\n",
            "Dropped PCs: [0 1] corrs: [np.float64(-0.3), np.float64(-0.256)]\n",
            "RF pooled (PCA-scrub k=3) acc: 0.875\n",
            "Dropped PCs: [ 0  1 20] corrs: [np.float64(-0.3), np.float64(-0.256), np.float64(-0.243)]\n"
          ]
        }
      ],
      "source": [
        "from sklearn.decomposition import PCA\n",
        "\n",
        "def pca_gender_scrub(Xz, g_binary, k=1):\n",
        "    # PCA on features\n",
        "    pca = PCA(n_components=min(Xz.shape[1], 60), svd_solver='full', random_state=42)\n",
        "    Z = pca.fit_transform(Xz.astype(np.float32))\n",
        "    # correlate PCs with gender (0/1)\n",
        "    cors = [np.corrcoef(Z[:,i], g_binary)[0,1] for i in range(Z.shape[1])]\n",
        "    order = np.argsort(np.abs(cors))[::-1][:k]\n",
        "    Z[:, order] = 0.0  # zero out top-k gender PCs\n",
        "    Xr = pca.inverse_transform(Z).astype(np.float32)\n",
        "    return Xr, cors, order\n",
        "\n",
        "g_bin = (df[\"gender\"].to_numpy()==\"female\").astype(np.int8)\n",
        "for k in [1,2,3]:\n",
        "    Xr, cors, dropped = pca_gender_scrub(Xz, g_bin, k=k)\n",
        "    acc, _, _ = eval_split(rf_model(), Xr, y, title=f\"RF pooled (PCA-scrub k={k})\")\n",
        "    print(\"Dropped PCs:\", dropped, \"corrs:\", [round(cors[i],3) for i in dropped])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mlSMzMN6FQSZ",
        "outputId": "5b8feaba-0606-4c97-ab31-137860cd718b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RF pooled (propensity-weighted) acc: 0.8635108944617372\n"
          ]
        }
      ],
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.pipeline import make_pipeline\n",
        "\n",
        "# gender propensity model\n",
        "prop = make_pipeline(StandardScaler(with_mean=True, with_std=True),\n",
        "                     LogisticRegression(max_iter=1500, solver=\"lbfgs\", class_weight=\"balanced\"))\n",
        "prop.fit(Xz, g_bin)\n",
        "p_female = prop.predict_proba(Xz)[:,1]\n",
        "# target 50/50 gender; weights = target_prob / predicted_prob for each sample's gender\n",
        "w = np.where(g_bin==1, 0.5/(p_female+1e-6), 0.5/(1-p_female+1e-6))\n",
        "\n",
        "Xtr, Xte, ytr, yte, wtr, wte = train_test_split(Xz, y, w, test_size=0.2, stratify=y, random_state=42)\n",
        "rf_w = rf_model().fit(Xtr, ytr, sample_weight=wtr)\n",
        "print(\"RF pooled (propensity-weighted) acc:\", accuracy_score(yte, rf_w.predict(Xte)))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "675KyqUNJm4c",
        "outputId": "9efd1899-3f70-496c-8c70-38e1d2631d8a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CORAL male→female acc: 0.25960913375589145\n",
            "CORAL female→male acc: 0.27270955165692007\n"
          ]
        }
      ],
      "source": [
        "from numpy.linalg import eigh\n",
        "\n",
        "def coral_fit_transform(Xs, Xt, eps=1e-4):\n",
        "    Xs_c = Xs - Xs.mean(0, keepdims=True); Xt_c = Xt - Xt.mean(0, keepdims=True)\n",
        "    Cs = (Xs_c.T @ Xs_c) / max(1, Xs_c.shape[0]-1) + np.eye(Xs.shape[1], dtype=np.float32)*eps\n",
        "    Ct = (Xt_c.T @ Xt_c) / max(1, Xt_c.shape[0]-1) + np.eye(Xt.shape[1], dtype=np.float32)*eps\n",
        "    Es, Vs = eigh(Cs); Ws = Vs @ np.diag((np.maximum(Es,eps))**-0.5) @ Vs.T\n",
        "    Et, Vt = eigh(Ct); Wt = Vt @ np.diag((np.maximum(Et,eps))**0.5)  @ Vt.T\n",
        "    return ((Xs_c @ Ws @ Wt) + Xt.mean(0, keepdims=True)).astype(np.float32)\n",
        "\n",
        "# male→female\n",
        "Xm_al = coral_fit_transform(Xm, Xf)\n",
        "rf = rf_model().fit(Xm_al, ym)\n",
        "print(\"CORAL male→female acc:\", accuracy_score(yf, rf.predict(Xf)))\n",
        "\n",
        "# female→male\n",
        "Xf_al = coral_fit_transform(Xf, Xm)\n",
        "rf = rf_model().fit(Xf_al, yf)\n",
        "print(\"CORAL female→male acc:\", accuracy_score(ym, rf.predict(Xm)))\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os, joblib, pandas as pd\n",
        "SAVE_DIR = \"/content/drive/My Drive/ser_cache\"   # same folder you used before\n",
        "os.makedirs(SAVE_DIR, exist_ok=True)\n",
        "\n",
        "# TODO: point these to your actual files on Drive\n",
        "male_path   = \"/content/drive/My Drive/Male_features.csv\"\n",
        "female_path = \"/content/drive/My Drive/Female_features.csv\"\n",
        "\n",
        "male   = pd.read_csv(male_path);   male[\"gender\"]   = \"male\"\n",
        "female = pd.read_csv(female_path); female[\"gender\"] = \"female\"\n",
        "\n",
        "df = pd.concat([male, female], ignore_index=True)\n",
        "print(\"df shape:\", df.shape)\n",
        "print(\"columns example:\", df.columns[:8].tolist())\n",
        "print(df[\"gender\"].value_counts())\n",
        "\n",
        "joblib.dump(df, f\"{SAVE_DIR}/df.pkl\")\n",
        "print(\"Cached:\", f\"{SAVE_DIR}/df.pkl\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "47ffEE-_sTfC",
        "outputId": "7e3f3260-1198-4e64-cebb-65915d359a37"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "df shape: (85134, 60)\n",
            "columns example: ['0', '1', '2', '3', '4', '5', '6', '7']\n",
            "gender\n",
            "female    49224\n",
            "male      35910\n",
            "Name: count, dtype: int64\n",
            "Cached: /content/drive/My Drive/ser_cache/df.pkl\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os, joblib, shutil\n",
        "\n",
        "save_dir_drive = \"/content/drive/My Drive/ser_models\"\n",
        "save_dir_local = \"/content/ser_models\"\n",
        "os.makedirs(save_dir_local, exist_ok=True)\n",
        "os.makedirs(save_dir_drive, exist_ok=True)\n",
        "\n",
        "# compress=1 is much faster than default, still not huge files\n",
        "joblib.dump(m_model, f\"{save_dir_local}/rf_male.pkl\",   compress=1)\n",
        "joblib.dump(f_model, f\"{save_dir_local}/rf_female.pkl\", compress=1)\n",
        "joblib.dump(FEATS,   f\"{save_dir_local}/feature_names.pkl\", compress=1)\n",
        "\n",
        "# one-time copy to Drive (fast because it's a single copy op)\n",
        "for fn in [\"rf_male.pkl\",\"rf_female.pkl\",\"feature_names.pkl\"]:\n",
        "    shutil.copy2(f\"{save_dir_local}/{fn}\", f\"{save_dir_drive}/{fn}\")\n",
        "\n",
        "print(\"Saved locally and copied to Drive.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NaXvXWF5JVS8",
        "outputId": "2138f720-244f-4111-efc9-90de51125221"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved locally and copied to Drive.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib, numpy as np\n",
        "\n",
        "def row_z(x):\n",
        "    mu = x.mean(axis=1, keepdims=True); sd = x.std(axis=1, keepdims=True) + 1e-8\n",
        "    return (x - mu) / sd\n",
        "\n",
        "# Load once (from local if present; fallback to Drive)\n",
        "def load_router(model_dir=\"/content/ser_models\", fallback=\"/content/drive/My Drive/ser_models\"):\n",
        "    try:\n",
        "        rf_m = joblib.load(f\"{model_dir}/rf_male.pkl\")\n",
        "        rf_f = joblib.load(f\"{model_dir}/rf_female.pkl\")\n",
        "        feats = joblib.load(f\"{model_dir}/feature_names.pkl\")\n",
        "    except Exception:\n",
        "        rf_m = joblib.load(f\"{fallback}/rf_male.pkl\")\n",
        "        rf_f = joblib.load(f\"{fallback}/rf_female.pkl\")\n",
        "        feats = joblib.load(f\"{fallback}/feature_names.pkl\")\n",
        "    return rf_m, rf_f, feats\n",
        "\n",
        "RF_MALE, RF_FEMALE, FEATS = load_router()\n"
      ],
      "metadata": {
        "id": "RuJvwGp3xurX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def predict_emotion_row(feature_row: np.ndarray, gender: str):\n",
        "    x = np.asarray(feature_row, dtype=np.float32).reshape(1, -1)\n",
        "    xz = row_z(x)\n",
        "    mdl = RF_MALE if gender.lower()==\"male\" else RF_FEMALE\n",
        "    proba = mdl.predict_proba(xz)[0]\n",
        "    return mdl.classes_[np.argmax(proba)], float(np.max(proba))\n",
        "\n",
        "# batch (DataFrame with same feature columns, optional 'gender')\n",
        "import pandas as pd\n",
        "def predict_batch(df_new: pd.DataFrame, gender_col=\"gender\", default_gender=\"male\"):\n",
        "    # ensure same column order; add missing as 0\n",
        "    for c in FEATS:\n",
        "        if c not in df_new.columns:\n",
        "            df_new[c] = 0.0\n",
        "    X = df_new[FEATS].to_numpy(np.float32)\n",
        "    Xz = row_z(X)\n",
        "\n",
        "    genders = df_new[gender_col].fillna(default_gender).str.lower() if gender_col in df_new.columns else pd.Series([default_gender]*len(df_new))\n",
        "    mask_m = genders.eq(\"male\").to_numpy()\n",
        "    mask_f = ~mask_m\n",
        "\n",
        "    preds = np.empty(len(df_new), dtype=object)\n",
        "    confs = np.empty(len(df_new), dtype=np.float32)\n",
        "\n",
        "    if mask_m.any():\n",
        "        proba_m = RF_MALE.predict_proba(Xz[mask_m])\n",
        "        idx_m   = np.argmax(proba_m, axis=1)\n",
        "        preds[mask_m] = RF_MALE.classes_[idx_m]\n",
        "        confs[mask_m] = proba_m[np.arange(len(idx_m)), idx_m]\n",
        "    if mask_f.any():\n",
        "        proba_f = RF_FEMALE.predict_proba(Xz[mask_f])\n",
        "        idx_f   = np.argmax(proba_f, axis=1)\n",
        "        preds[mask_f] = RF_FEMALE.classes_[idx_f]\n",
        "        confs[mask_f] = proba_f[np.arange(len(idx_f)), idx_f]\n",
        "\n",
        "    out = df_new.copy()\n",
        "    out[\"pred\"] = preds\n",
        "    out[\"conf\"] = confs\n",
        "    return out\n"
      ],
      "metadata": {
        "id": "CSVvFDBix3p4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J46JcNk-620H",
        "outputId": "9391f457-54dc-4d67-fda8-4665bae23e09"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "newdf = pd.read_csv(\"/content/drive/My Drive/features.csv\")\n"
      ],
      "metadata": {
        "id": "91r_ADjJ7DAn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "results = predict_batch(newdf, default_gender=\"male\")  # or \"female\" if that matches the dataset\n",
        "results.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "yEmys21f7HTU",
        "outputId": "c1263c8d-ce85-4e09-f2f1-36332bf5fbdc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            0           1          2          3          4         5  \\\n",
              "0 -637.701233  104.299019   4.894947  20.494011  12.552954  2.851410   \n",
              "1 -596.908460   86.871936   9.470162  17.109819  11.198966  1.541056   \n",
              "2 -698.086548   99.795929   1.892679  19.915264   7.532868  1.265761   \n",
              "3 -279.141052   41.092949 -21.319229   7.802911 -13.140503 -9.407660   \n",
              "4 -160.074686   17.576058  -2.147436   3.133417  -4.745002 -6.510771   \n",
              "\n",
              "           6         7          8         9  ...        13         14  \\\n",
              "0  -6.633390 -4.091278 -10.423918 -6.406950  ... -5.292450  -0.573319   \n",
              "1  -6.677264 -5.755428  -9.684472 -6.891256  ... -5.103855  -1.253110   \n",
              "2  -9.188656 -5.798194 -12.299710 -4.976400  ... -4.890347  -0.879222   \n",
              "3 -15.580647 -6.097223 -24.700903 -9.640293  ... -5.817179 -10.731523   \n",
              "4  -5.911591 -4.481506  -9.470598 -5.907823  ... -2.994765  -4.893176   \n",
              "\n",
              "         15         16        17        18        19      labels  pred  \\\n",
              "0  1.019471  -3.492607 -3.468123 -1.214944  1.971239   male_calm     5   \n",
              "1  0.514896  -3.268317 -4.502895  0.167153  0.256732   male_calm     5   \n",
              "2 -1.250208  -3.449960 -4.708529 -0.086224 -3.034044   male_calm     7   \n",
              "3 -0.823596 -15.885103 -2.014258 -6.173852 -5.331760  male_angry     0   \n",
              "4 -2.880436  -7.163400 -2.147345 -2.359248 -3.746217  male_angry     0   \n",
              "\n",
              "       conf  \n",
              "0  0.203023  \n",
              "1  0.183065  \n",
              "2  0.194653  \n",
              "3  0.635000  \n",
              "4  0.322960  \n",
              "\n",
              "[5 rows x 23 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ad166d53-5625-43c0-a91f-a3c891fc3170\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>13</th>\n",
              "      <th>14</th>\n",
              "      <th>15</th>\n",
              "      <th>16</th>\n",
              "      <th>17</th>\n",
              "      <th>18</th>\n",
              "      <th>19</th>\n",
              "      <th>labels</th>\n",
              "      <th>pred</th>\n",
              "      <th>conf</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-637.701233</td>\n",
              "      <td>104.299019</td>\n",
              "      <td>4.894947</td>\n",
              "      <td>20.494011</td>\n",
              "      <td>12.552954</td>\n",
              "      <td>2.851410</td>\n",
              "      <td>-6.633390</td>\n",
              "      <td>-4.091278</td>\n",
              "      <td>-10.423918</td>\n",
              "      <td>-6.406950</td>\n",
              "      <td>...</td>\n",
              "      <td>-5.292450</td>\n",
              "      <td>-0.573319</td>\n",
              "      <td>1.019471</td>\n",
              "      <td>-3.492607</td>\n",
              "      <td>-3.468123</td>\n",
              "      <td>-1.214944</td>\n",
              "      <td>1.971239</td>\n",
              "      <td>male_calm</td>\n",
              "      <td>5</td>\n",
              "      <td>0.203023</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-596.908460</td>\n",
              "      <td>86.871936</td>\n",
              "      <td>9.470162</td>\n",
              "      <td>17.109819</td>\n",
              "      <td>11.198966</td>\n",
              "      <td>1.541056</td>\n",
              "      <td>-6.677264</td>\n",
              "      <td>-5.755428</td>\n",
              "      <td>-9.684472</td>\n",
              "      <td>-6.891256</td>\n",
              "      <td>...</td>\n",
              "      <td>-5.103855</td>\n",
              "      <td>-1.253110</td>\n",
              "      <td>0.514896</td>\n",
              "      <td>-3.268317</td>\n",
              "      <td>-4.502895</td>\n",
              "      <td>0.167153</td>\n",
              "      <td>0.256732</td>\n",
              "      <td>male_calm</td>\n",
              "      <td>5</td>\n",
              "      <td>0.183065</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-698.086548</td>\n",
              "      <td>99.795929</td>\n",
              "      <td>1.892679</td>\n",
              "      <td>19.915264</td>\n",
              "      <td>7.532868</td>\n",
              "      <td>1.265761</td>\n",
              "      <td>-9.188656</td>\n",
              "      <td>-5.798194</td>\n",
              "      <td>-12.299710</td>\n",
              "      <td>-4.976400</td>\n",
              "      <td>...</td>\n",
              "      <td>-4.890347</td>\n",
              "      <td>-0.879222</td>\n",
              "      <td>-1.250208</td>\n",
              "      <td>-3.449960</td>\n",
              "      <td>-4.708529</td>\n",
              "      <td>-0.086224</td>\n",
              "      <td>-3.034044</td>\n",
              "      <td>male_calm</td>\n",
              "      <td>7</td>\n",
              "      <td>0.194653</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-279.141052</td>\n",
              "      <td>41.092949</td>\n",
              "      <td>-21.319229</td>\n",
              "      <td>7.802911</td>\n",
              "      <td>-13.140503</td>\n",
              "      <td>-9.407660</td>\n",
              "      <td>-15.580647</td>\n",
              "      <td>-6.097223</td>\n",
              "      <td>-24.700903</td>\n",
              "      <td>-9.640293</td>\n",
              "      <td>...</td>\n",
              "      <td>-5.817179</td>\n",
              "      <td>-10.731523</td>\n",
              "      <td>-0.823596</td>\n",
              "      <td>-15.885103</td>\n",
              "      <td>-2.014258</td>\n",
              "      <td>-6.173852</td>\n",
              "      <td>-5.331760</td>\n",
              "      <td>male_angry</td>\n",
              "      <td>0</td>\n",
              "      <td>0.635000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-160.074686</td>\n",
              "      <td>17.576058</td>\n",
              "      <td>-2.147436</td>\n",
              "      <td>3.133417</td>\n",
              "      <td>-4.745002</td>\n",
              "      <td>-6.510771</td>\n",
              "      <td>-5.911591</td>\n",
              "      <td>-4.481506</td>\n",
              "      <td>-9.470598</td>\n",
              "      <td>-5.907823</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.994765</td>\n",
              "      <td>-4.893176</td>\n",
              "      <td>-2.880436</td>\n",
              "      <td>-7.163400</td>\n",
              "      <td>-2.147345</td>\n",
              "      <td>-2.359248</td>\n",
              "      <td>-3.746217</td>\n",
              "      <td>male_angry</td>\n",
              "      <td>0</td>\n",
              "      <td>0.322960</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 23 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad166d53-5625-43c0-a91f-a3c891fc3170')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ad166d53-5625-43c0-a91f-a3c891fc3170 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ad166d53-5625-43c0-a91f-a3c891fc3170');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-865ade2c-4976-4d0a-8268-24922cca30c7\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-865ade2c-4976-4d0a-8268-24922cca30c7')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-865ade2c-4976-4d0a-8268-24922cca30c7 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "results"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd, numpy as np\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "\n",
        "# 0) load your CSV from Drive\n",
        "newdf = pd.read_csv(\"/content/drive/My Drive/features.csv\")  # adjust path if needed\n",
        "print(\"newdf shape:\", newdf.shape)\n",
        "\n",
        "# 1) check feature alignment vs training FEATS\n",
        "missing = [c for c in FEATS if c not in newdf.columns]\n",
        "extra   = [c for c in newdf.columns if c not in FEATS + [\"labels\",\"gender\"]]\n",
        "print(f\"features expected: {len(FEATS)} | present: {sum(c in newdf.columns for c in FEATS)}\")\n",
        "print(\"missing (first 20):\", missing[:20])\n",
        "print(\"extra   (first 20):\", extra[:20])\n",
        "\n",
        "# add missing feature columns as zeros and align order\n",
        "for c in missing: newdf[c] = 0.0\n",
        "X_aligned = newdf[FEATS].to_numpy(np.float32)\n",
        "\n",
        "# z-score row-wise (same as training)\n",
        "def row_z(X):\n",
        "    mu = X.mean(axis=1, keepdims=True); sd = X.std(axis=1, keepdims=True) + 1e-8\n",
        "    return (X - mu) / sd\n",
        "Xz = row_z(X_aligned)\n",
        "\n",
        "# 2) dual-gender routing: run both models, choose the higher-confidence prediction\n",
        "proba_m = RF_MALE.predict_proba(Xz)\n",
        "proba_f = RF_FEMALE.predict_proba(Xz)\n",
        "\n",
        "idx_m = proba_m.argmax(1); conf_m = proba_m[np.arange(len(idx_m)), idx_m]\n",
        "idx_f = proba_f.argmax(1); conf_f = proba_f[np.arange(len(idx_f)), idx_f]\n",
        "\n",
        "label_m = RF_MALE.classes_[idx_m]\n",
        "label_f = RF_FEMALE.classes_[idx_f]\n",
        "\n",
        "pick_female = conf_f > conf_m\n",
        "chosen_label = np.where(pick_female, label_f, label_m)\n",
        "chosen_conf  = np.where(pick_female, conf_f, conf_m)\n",
        "chosen_gender= np.where(pick_female, \"female\", \"male\")\n",
        "\n",
        "results = newdf.copy()\n",
        "results[\"pred\"]   = chosen_label\n",
        "results[\"conf\"]   = chosen_conf\n",
        "results[\"routed\"] = chosen_gender\n",
        "\n",
        "print(results.head())\n",
        "\n",
        "# 3) optional: apply a confidence threshold (reject low-confidence)\n",
        "THRESH = 0.60\n",
        "results[\"final_pred\"] = results[\"pred\"]\n",
        "results.loc[results[\"conf\"] < THRESH, \"final_pred\"] = \"UNSURE\"\n",
        "\n",
        "# 4) if the CSV has ground-truth labels, evaluate\n",
        "if \"labels\" in newdf.columns:\n",
        "    y_true = newdf[\"labels\"].astype(str).values\n",
        "    acc    = accuracy_score(y_true, results[\"pred\"])\n",
        "    print(f\"\\nRaw accuracy (no reject): {acc:.3f}\")\n",
        "    print(\"\\nClassification report:\\n\", classification_report(y_true, results[\"pred\"], digits=3))\n",
        "    # with reject\n",
        "    keep = results[\"final_pred\"] != \"UNSURE\"\n",
        "    if keep.any():\n",
        "        acc_kept = accuracy_score(y_true[keep], results.loc[keep,\"final_pred\"])\n",
        "        cov = keep.mean()\n",
        "        print(f\"\\nWith threshold {THRESH}: coverage={cov:.2f}, accuracy_on_kept={acc_kept:.3f}\")\n",
        "\n",
        "# 5) save predictions\n",
        "results.to_csv(\"/content/drive/My Drive/predictions_ravdess.csv\", index=False)\n",
        "print(\"\\nsaved: /content/drive/My Drive/predictions_ravdess.csv\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 930
        },
        "id": "nG8y-wya-PLa",
        "outputId": "eca254e6-9ed3-442d-96ed-e71adaf1b347"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "newdf shape: (4320, 21)\n",
            "features expected: 58 | present: 20\n",
            "missing (first 20): ['20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39']\n",
            "extra   (first 20): []\n",
            "            0           1          2          3          4         5  \\\n",
            "0 -637.701233  104.299019   4.894947  20.494011  12.552954  2.851410   \n",
            "1 -596.908460   86.871936   9.470162  17.109819  11.198966  1.541056   \n",
            "2 -698.086548   99.795929   1.892679  19.915264   7.532868  1.265761   \n",
            "3 -279.141052   41.092949 -21.319229   7.802911 -13.140503 -9.407660   \n",
            "4 -160.074686   17.576058  -2.147436   3.133417  -4.745002 -6.510771   \n",
            "\n",
            "           6         7          8         9  ...   51   52   53   54   55  \\\n",
            "0  -6.633390 -4.091278 -10.423918 -6.406950  ...  0.0  0.0  0.0  0.0  0.0   \n",
            "1  -6.677264 -5.755428  -9.684472 -6.891256  ...  0.0  0.0  0.0  0.0  0.0   \n",
            "2  -9.188656 -5.798194 -12.299710 -4.976400  ...  0.0  0.0  0.0  0.0  0.0   \n",
            "3 -15.580647 -6.097223 -24.700903 -9.640293  ...  0.0  0.0  0.0  0.0  0.0   \n",
            "4  -5.911591 -4.481506  -9.470598 -5.907823  ...  0.0  0.0  0.0  0.0  0.0   \n",
            "\n",
            "    56   57  pred      conf  routed  \n",
            "0  0.0  0.0     2  0.343852  female  \n",
            "1  0.0  0.0     2  0.295973  female  \n",
            "2  0.0  0.0     2  0.290973  female  \n",
            "3  0.0  0.0     0  0.635000    male  \n",
            "4  0.0  0.0     0  0.357500  female  \n",
            "\n",
            "[5 rows x 62 columns]\n",
            "\n",
            "Raw accuracy (no reject): 0.000\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-414504471.py:50: FutureWarning: Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas. Value 'UNSURE' has dtype incompatible with int64, please explicitly cast to a compatible dtype first.\n",
            "  results.loc[results[\"conf\"] < THRESH, \"final_pred\"] = \"UNSURE\"\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Mix of label input types (string and number)",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-414504471.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     55\u001b[0m     \u001b[0macc\u001b[0m    \u001b[0;34m=\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"pred\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"\\nRaw accuracy (no reject): {acc:.3f}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\\nClassification report:\\n\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclassification_report\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"pred\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdigits\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m     \u001b[0;31m# with reject\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     \u001b[0mkeep\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"final_pred\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m\"UNSURE\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/sklearn/utils/_param_validation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    214\u001b[0m                     )\n\u001b[1;32m    215\u001b[0m                 ):\n\u001b[0;32m--> 216\u001b[0;31m                     \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mInvalidParameterError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m                 \u001b[0;31m# When the function is just a wrapper around an estimator, we allow\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/sklearn/metrics/_classification.py\u001b[0m in \u001b[0;36mclassification_report\u001b[0;34m(y_true, y_pred, labels, target_names, sample_weight, digits, output_dict, zero_division)\u001b[0m\n\u001b[1;32m   2672\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2673\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2674\u001b[0;31m         \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0munique_labels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2675\u001b[0m         \u001b[0mlabels_given\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2676\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/sklearn/utils/multiclass.py\u001b[0m in \u001b[0;36munique_labels\u001b[0;34m(*ys)\u001b[0m\n\u001b[1;32m    115\u001b[0m     \u001b[0;31m# Check that we don't mix string type with number type\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mys_labels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 117\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Mix of label input types (string and number)\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    118\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mys_labels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Mix of label input types (string and number)"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "\n",
        "# 1) convert predictions to an object column before writing 'UNSURE'\n",
        "results[\"final_pred\"] = results[\"pred\"].astype(object)   # fixes the dtype warning\n",
        "THRESH = 0.60\n",
        "results.loc[results[\"conf\"] < THRESH, \"final_pred\"] = \"UNSURE\"\n",
        "\n",
        "# 2) Inspect label types from the file and from the model\n",
        "print(\"model classes (male):\", RF_MALE.classes_)\n",
        "print(\"model classes (female):\", RF_FEMALE.classes_)\n",
        "print(\"newdf label sample/unique:\", newdf[\"labels\"].head(3).tolist(), pd.unique(newdf[\"labels\"])[:10])\n",
        "\n",
        "# 3) Put both y_true and predictions into the SAME space before scoring.\n",
        "#    Option A: compare as STRINGS (quick, but only works if your model classes are also readable strings)\n",
        "y_true_str = newdf[\"labels\"].astype(str).values\n",
        "pred_str   = results[\"pred\"].astype(str).values  # '0','1' vs 'happy','sad' still won't match if codings differ\n",
        "\n",
        "# If label names/codings differ, build a mapping.\n",
        "# Example: if your model uses ints 0..7 and your CSV has strings, define mapping MANUALLY once:\n",
        "# NAME_TO_ID = {'neutral':0, 'calm':1, 'happy':2, 'sad':3, 'angry':4, 'fear':5, 'disgust':6, 'surprise':7}\n",
        "# then do:\n",
        "# y_true_id = np.array([NAME_TO_ID.get(s, -1) for s in newdf['labels'].astype(str)])\n",
        "# acc = accuracy_score(y_true_id[y_true_id>=0], results.loc[y_true_id>=0, 'pred'])\n",
        "\n",
        "# For now, only run the text-based report if the sets overlap meaningfully:\n",
        "labels_union = sorted(set(y_true_str) | set(pred_str))\n",
        "if len(set(y_true_str) & set(pred_str)) > 0:\n",
        "    print(\"\\nText-space report (only meaningful if names match):\")\n",
        "    print(classification_report(y_true_str, pred_str, labels=labels_union, digits=3))\n",
        "else:\n",
        "    print(\"\\nLabel names don’t match the model’s classes; skip accuracy here and just use predictions.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hMMz69bt_iqe",
        "outputId": "3e367c0c-a259-4ba8-c1c2-397453b4683e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "model classes (male): [0 1 2 3 4 5 6 7]\n",
            "model classes (female): [0 1 2 3 4 5 6 7]\n",
            "newdf label sample/unique: ['male_calm', 'male_calm', 'male_calm'] ['male_calm' 'male_angry' 'male_fear' 'male_neutral' 'male_sad'\n",
            " 'male_happy' 'male_surprise' 'male_disgust' 'female_calm' 'female_angry']\n",
            "\n",
            "Label names don’t match the model’s classes; skip accuracy here and just use predictions.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# EXAMPLE mapping – edit to match YOUR training label order\n",
        "NAME_TO_ID = {\n",
        "    'neutral':0, 'calm':1, 'happy':2, 'sad':3,\n",
        "    'angry':4, 'fear':5, 'disgust':6, 'surprise':7\n",
        "}\n",
        "ID_TO_NAME = {v:k for k,v in NAME_TO_ID.items()}\n",
        "\n",
        "# map both sides\n",
        "y_true_id  = np.array([NAME_TO_ID.get(s, -1) for s in newdf['labels'].astype(str)])\n",
        "pred_id    = results['pred'].astype(int).values\n",
        "\n",
        "mask = y_true_id >= 0\n",
        "print(\"Aligned accuracy:\", accuracy_score(y_true_id[mask], pred_id[mask]))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TYeqWKTQABo5",
        "outputId": "b3ee500a-eabc-425f-f3dc-b3c629332846"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Aligned accuracy: nan\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/numpy/lib/_function_base_impl.py:557: RuntimeWarning: Mean of empty slice.\n",
            "  avg = a.mean(axis, **keepdims_kw)\n",
            "/usr/local/lib/python3.12/dist-packages/numpy/_core/_methods.py:138: RuntimeWarning: invalid value encountered in scalar divide\n",
            "  ret = ret.dtype.type(ret / rcount)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# only if RF_MALE.classes_ are strings\n",
        "pred_name = results['pred'].astype(str)   # or map ints -> names if needed\n"
      ],
      "metadata": {
        "id": "XBLRjaxgAPEz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# high-confidence only\n",
        "accepted = results[results[\"conf\"] >= 0.6]\n",
        "print(\"coverage:\", len(accepted)/len(results), \"| sample preds:\\n\", accepted.head(5)[[\"pred\",\"conf\",\"routed\"]])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oakuZ1X7AXzt",
        "outputId": "6bdc6ecb-f8ba-4285-c2d6-9c57c2be2e07"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "coverage: 0.11805555555555555 | sample preds:\n",
            "      pred      conf routed\n",
            "3       0  0.635000   male\n",
            "45      0  0.665000   male\n",
            "90      0  0.657500   male\n",
            "108     0  0.605000   male\n",
            "121     7  0.606441   male\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np, pandas as pd\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "\n",
        "# 1) strip gender prefix from the RAVDESS labels\n",
        "core_names = newdf[\"labels\"].astype(str).str.replace(r\"^(male|female)_\", \"\", regex=True)\n",
        "\n",
        "# 2) map names -> your class ids (alphabetical order used in your earlier reports)\n",
        "NAME_TO_ID = {\n",
        "    \"angry\":0, \"calm\":1, \"disgust\":2, \"fear\":3,\n",
        "    \"happy\":4, \"neutral\":5, \"sad\":6, \"surprise\":7\n",
        "}\n",
        "ID_TO_NAME = {v:k for k,v in NAME_TO_ID.items()}\n",
        "\n",
        "y_true_id = core_names.map(NAME_TO_ID).to_numpy()          # -1/NaN if unseen name\n",
        "pred_id   = results[\"pred\"].astype(int).to_numpy()\n",
        "\n",
        "mask = ~pd.isna(y_true_id)                                  # valid rows only\n",
        "y_true_id = y_true_id[mask].astype(int)\n",
        "pred_id   = pred_id[mask]\n",
        "\n",
        "print(\"Aligned accuracy (no reject):\", round(accuracy_score(y_true_id, pred_id), 3))\n",
        "print(\"\\nClassification report:\\n\",\n",
        "      classification_report(y_true_id, pred_id,\n",
        "                            labels=list(range(8)),\n",
        "                            target_names=[ID_TO_NAME[i] for i in range(8)],\n",
        "                            digits=3))\n",
        "\n",
        "# 3) with confidence threshold + UNSURE\n",
        "THRESH = 0.60\n",
        "results[\"final_pred\"] = results[\"pred\"].astype(object)      # avoid dtype warning\n",
        "results.loc[results[\"conf\"] < THRESH, \"final_pred\"] = \"UNSURE\"\n",
        "\n",
        "keep = (results[\"final_pred\"] != \"UNSURE\").to_numpy()[mask]\n",
        "if keep.any():\n",
        "    acc_kept = accuracy_score(y_true_id[keep], results.loc[mask, \"final_pred\"].to_numpy()[keep].astype(int))\n",
        "    cov = keep.mean()\n",
        "    print(f\"\\nWith threshold {THRESH}: coverage={cov:.3f}, accuracy_on_kept={acc_kept:.3f}\")\n",
        "else:\n",
        "    print(f\"\\nWith threshold {THRESH}: no samples kept; try a lower threshold (e.g., 0.50).\")\n",
        "\n",
        "# 4) optional: confusion matrix on kept samples\n",
        "if keep.any():\n",
        "    from sklearn.metrics import ConfusionMatrixDisplay\n",
        "    import matplotlib.pyplot as plt\n",
        "    cm = confusion_matrix(y_true_id[keep], results.loc[mask, \"final_pred\"].to_numpy()[keep].astype(int), labels=range(8))\n",
        "    disp = ConfusionMatrixDisplay(cm, display_labels=[ID_TO_NAME[i] for i in range(8)])\n",
        "    fig, ax = plt.subplots(figsize=(6,6)); disp.plot(ax=ax, cmap=\"Blues\", values_format=\"d\"); plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 868
        },
        "id": "hN0YXLNoCHke",
        "outputId": "0f3f4ed9-2094-4ea5-a584-9980447da1d8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Aligned accuracy (no reject): 0.272\n",
            "\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "       angry      0.525     0.490     0.507       576\n",
            "        calm      0.492     0.052     0.094       576\n",
            "     disgust      0.202     0.193     0.197       576\n",
            "        fear      0.529     0.255     0.344       576\n",
            "       happy      0.345     0.104     0.160       576\n",
            "     neutral      0.600     0.010     0.020       288\n",
            "         sad      0.196     0.130     0.156       576\n",
            "    surprise      0.199     0.807     0.320       576\n",
            "\n",
            "    accuracy                          0.272      4320\n",
            "   macro avg      0.386     0.255     0.225      4320\n",
            "weighted avg      0.372     0.272     0.239      4320\n",
            "\n",
            "\n",
            "With threshold 0.6: coverage=0.118, accuracy_on_kept=0.327\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# =========================================================\n",
        "# 0) SETUP: paths + helpers\n",
        "# =========================================================\n",
        "import os, joblib, numpy as np, pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "\n",
        "DRIVE = \"/content/drive\"\n",
        "CACHE_DIR = f\"{DRIVE}/My Drive/ser_cache\"      # where df.pkl lives\n",
        "MODEL_DIR = f\"{DRIVE}/My Drive/ser_models_20\"  # new models limited to 20 feats\n",
        "os.makedirs(MODEL_DIR, exist_ok=True)\n",
        "\n",
        "def row_z(X):\n",
        "    X = X.astype(np.float32, copy=False)\n",
        "    m = X.mean(axis=1, keepdims=True); s = X.std(axis=1, keepdims=True) + 1e-8\n",
        "    return (X - m) / s\n",
        "\n",
        "def rf_model():\n",
        "    return RandomForestClassifier(\n",
        "        n_estimators=400, max_depth=30, max_features=\"sqrt\",\n",
        "        min_samples_split=2, min_samples_leaf=1,\n",
        "        class_weight=\"balanced_subsample\",\n",
        "        random_state=42, n_jobs=-1\n",
        "    )\n",
        "\n",
        "# If you haven't already:\n",
        "# from google.colab import drive; drive.mount('/content/drive')\n",
        "\n",
        "# =========================================================\n",
        "# 1) LOAD your cached dataframe + the RAVDESS CSV\n",
        "# =========================================================\n",
        "df = joblib.load(f\"{CACHE_DIR}/df.pkl\")  # must contain columns: 'labels', 'gender', numeric feature columns\n",
        "rav_path = f\"{DRIVE}/My Drive/features.csv\"  # <-- your RAVDESS MFCC CSV\n",
        "rav = pd.read_csv(rav_path)\n",
        "\n",
        "# Determine the shared feature set (intersection)\n",
        "raw_feat_cols = [c for c in df.columns if c not in (\"labels\",\"gender\")]\n",
        "rav_feat_cols = [c for c in rav.columns if c not in (\"labels\",\"gender\")]\n",
        "FEATS_20 = sorted(set(raw_feat_cols).intersection(rav_feat_cols))\n",
        "\n",
        "print(f\"Shared features: {len(FEATS_20)} -> {FEATS_20[:10]}{' ...' if len(FEATS_20)>10 else ''}\")\n",
        "assert len(FEATS_20) >= 15, \"Too few shared features; check column names.\"\n",
        "\n",
        "# =========================================================\n",
        "# 2) TRAIN two RFs (male / female) using ONLY shared features\n",
        "# =========================================================\n",
        "def train_gender_model(gender):\n",
        "    d = df[df[\"gender\"].str.lower()==gender].copy()\n",
        "    X = row_z(d[FEATS_20].to_numpy(np.float32))\n",
        "    y = d[\"labels\"].astype(int).to_numpy()\n",
        "    Xtr, Xte, ytr, yte = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
        "    mdl = rf_model().fit(Xtr, ytr)\n",
        "    acc = mdl.score(Xte, yte)\n",
        "    print(f\"{gender.capitalize()} RF (20 feats) holdout acc: {acc:.3f}\")\n",
        "    return mdl, (Xtr, Xte, ytr, yte)\n",
        "\n",
        "rf_male, _   = train_gender_model(\"male\")\n",
        "rf_female, _ = train_gender_model(\"female\")\n",
        "\n",
        "# Save models + the feature list\n",
        "joblib.dump(rf_male,   f\"{MODEL_DIR}/rf_male_20.pkl\")\n",
        "joblib.dump(rf_female, f\"{MODEL_DIR}/rf_female_20.pkl\")\n",
        "joblib.dump(FEATS_20,  f\"{MODEL_DIR}/feature_names_20.pkl\")\n",
        "print(\"Saved:\", MODEL_DIR)\n",
        "\n",
        "# =========================================================\n",
        "# 3) ROUTER inference on RAVDESS with the new 20-feature models\n",
        "# =========================================================\n",
        "def predict_router_20(rav_df):\n",
        "    # align columns (add missing shared feats as 0; keep only shared feats)\n",
        "    X = rav_df.reindex(columns=FEATS_20, fill_value=0.0).to_numpy(np.float32)\n",
        "    Xz = row_z(X)\n",
        "\n",
        "    # run both models; pick higher confidence\n",
        "    pm = rf_male.predict_proba(Xz); im = pm.argmax(1); cm = pm[np.arange(len(im)), im]\n",
        "    pf = rf_female.predict_proba(Xz); iF = pf.argmax(1); cF = pf[np.arange(len(iF)), iF]\n",
        "\n",
        "    pick_f = cF > cm\n",
        "    pred   = np.where(pick_f, rf_female.classes_[iF], rf_male.classes_[im])\n",
        "    conf   = np.where(pick_f, cF, cm)\n",
        "    routed = np.where(pick_f, \"female\", \"male\")\n",
        "\n",
        "    out = rav_df.copy()\n",
        "    out[\"pred\"] = pred.astype(int)\n",
        "    out[\"conf\"] = conf.astype(np.float32)\n",
        "    out[\"routed\"] = routed\n",
        "    return out\n",
        "\n",
        "results_20 = predict_router_20(rav)\n",
        "\n",
        "# =========================================================\n",
        "# 4) EVALUATE on RAVDESS labels (map male_/female_ prefixes)\n",
        "# =========================================================\n",
        "# Strip gender prefix in RAVDESS labels and map to your class IDs\n",
        "NAME_TO_ID = {\n",
        "    \"angry\":0, \"calm\":1, \"disgust\":2, \"fear\":3,\n",
        "    \"happy\":4, \"neutral\":5, \"sad\":6, \"surprise\":7\n",
        "}\n",
        "ID_TO_NAME = {v:k for k,v in NAME_TO_ID.items()}\n",
        "\n",
        "core_names = rav[\"labels\"].astype(str).str.replace(r\"^(male|female)_\", \"\", regex=True)\n",
        "y_true_id  = core_names.map(NAME_TO_ID).to_numpy()\n",
        "\n",
        "mask_valid = ~pd.isna(y_true_id)\n",
        "acc = accuracy_score(y_true_id[mask_valid].astype(int), results_20.loc[mask_valid,\"pred\"].to_numpy())\n",
        "print(f\"\\nRAVDESS accuracy with 20 shared features: {acc:.3f}\")\n",
        "\n",
        "print(\"\\nClassification report (RAVDESS):\\n\",\n",
        "      classification_report(\n",
        "          y_true_id[mask_valid].astype(int),\n",
        "          results_20.loc[mask_valid,\"pred\"].to_numpy(),\n",
        "          labels=list(range(8)),\n",
        "          target_names=[ID_TO_NAME[i] for i in range(8)],\n",
        "          digits=3\n",
        "      ))\n",
        "\n",
        "# Optional high-confidence slice\n",
        "THRESH = 0.60\n",
        "keep = results_20[\"conf\"] >= THRESH\n",
        "if keep.any():\n",
        "    acc_kept = accuracy_score(\n",
        "        y_true_id[mask_valid & keep].astype(int),\n",
        "        results_20.loc[mask_valid & keep, \"pred\"].to_numpy()\n",
        "    )\n",
        "    print(f\"\\nWith threshold {THRESH}: coverage={keep.mean():.3f}, acc_on_kept={acc_kept:.3f}\")\n",
        "else:\n",
        "    print(f\"\\nWith threshold {THRESH}: no samples kept.\")\n",
        "\n",
        "# Save predictions\n",
        "results_20.to_csv(f\"{DRIVE}/My Drive/predictions_ravdess_20.csv\", index=False)\n",
        "print(\"\\nSaved predictions to My Drive: predictions_ravdess_20.csv\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        },
        "id": "Ha0-It0EHvO5",
        "outputId": "30c06e37-c05f-47fe-df4a-7eee215f9abe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shared features: 20 -> ['0', '1', '10', '11', '12', '13', '14', '15', '16', '17'] ...\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "invalid literal for int() with base 10: 'happy'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-2119452326.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     56\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mmdl\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mXtr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mXte\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mytr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myte\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     57\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 58\u001b[0;31m \u001b[0mrf_male\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m   \u001b[0;34m=\u001b[0m \u001b[0mtrain_gender_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"male\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     59\u001b[0m \u001b[0mrf_female\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_gender_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"female\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/tmp/ipython-input-2119452326.py\u001b[0m in \u001b[0;36mtrain_gender_model\u001b[0;34m(gender)\u001b[0m\n\u001b[1;32m     49\u001b[0m     \u001b[0md\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"gender\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0mgender\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m     \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrow_z\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mFEATS_20\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m     \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0md\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"labels\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_numpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m     \u001b[0mXtr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mXte\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mytr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myte\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_test_split\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstratify\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m     \u001b[0mmdl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mrf_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXtr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mytr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   6641\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6642\u001b[0m             \u001b[0;31m# else, only a single dtype is given\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6643\u001b[0;31m             \u001b[0mnew_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6644\u001b[0m             \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor_from_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6645\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    428\u001b[0m             \u001b[0mcopy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    429\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 430\u001b[0;31m         return self.apply(\n\u001b[0m\u001b[1;32m    431\u001b[0m             \u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m             \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, align_keys, **kwargs)\u001b[0m\n\u001b[1;32m    361\u001b[0m                 \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    362\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 363\u001b[0;31m                 \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    364\u001b[0m             \u001b[0mresult_blocks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mextend_blocks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mapplied\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult_blocks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    365\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors, using_cow, squeeze)\u001b[0m\n\u001b[1;32m    756\u001b[0m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m  \u001b[0;31m# type: ignore[call-overload]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    757\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 758\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array_safe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    759\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    760\u001b[0m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmaybe_coerce_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/core/dtypes/astype.py\u001b[0m in \u001b[0;36mastype_array_safe\u001b[0;34m(values, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    235\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    236\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 237\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    238\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mValueError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    239\u001b[0m         \u001b[0;31m# e.g. _astype_nansafe can fail on object-dtype of strings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/core/dtypes/astype.py\u001b[0m in \u001b[0;36mastype_array\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m    180\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    181\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 182\u001b[0;31m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_astype_nansafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    183\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m     \u001b[0;31m# in pandas we don't store numpy str dtypes, so convert to object\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/pandas/core/dtypes/astype.py\u001b[0m in \u001b[0;36m_astype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m    131\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcopy\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mobject\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mdtype\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    132\u001b[0m         \u001b[0;31m# Explicit copy, or required since NumPy can't view from / to object.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 133\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    135\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: invalid literal for int() with base 10: 'happy'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# --- label encoder (robust) ---\n",
        "NAME_TO_ID = {\n",
        "    \"angry\":0, \"calm\":1, \"disgust\":2, \"fear\":3,\n",
        "    \"happy\":4, \"neutral\":5, \"sad\":6, \"surprise\":7\n",
        "}\n",
        "ID_TO_NAME = {v:k for k,v in NAME_TO_ID.items()}\n",
        "\n",
        "def encode_labels(series: pd.Series) -> np.ndarray:\n",
        "    \"\"\"Return int ids 0..7 from labels that might be ints or strings like 'male_happy'.\"\"\"\n",
        "    s = series.copy()\n",
        "    if s.dtype.kind in \"iu\":          # already integer\n",
        "        return s.astype(int).to_numpy()\n",
        "    # strings -> strip gender prefix, lowercase, trim, map\n",
        "    s = (s.astype(str)\n",
        "           .str.replace(r\"^(male|female)_\", \"\", regex=True)\n",
        "           .str.lower().str.strip())\n",
        "    unknown = sorted(set(s.unique()) - set(NAME_TO_ID))\n",
        "    if unknown:\n",
        "        print(\"⚠️ Unknown labels in df:\", unknown)\n",
        "    return s.map(NAME_TO_ID).astype(int).to_numpy()\n",
        "\n",
        "# --- training with 20 shared features, using the encoder ---\n",
        "def train_gender_model(gender):\n",
        "    d = df[df[\"gender\"].astype(str).str.lower()==gender].copy()\n",
        "    X = row_z(d[FEATS_20].to_numpy(np.float32))\n",
        "    y = encode_labels(d[\"labels\"])\n",
        "    Xtr, Xte, ytr, yte = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n",
        "    mdl = rf_model().fit(Xtr, ytr)\n",
        "    acc = mdl.score(Xte, yte)\n",
        "    print(f\"{gender.capitalize()} RF (20 feats) holdout acc: {acc:.3f}\")\n",
        "    return mdl, (Xtr, Xte, ytr, yte)\n",
        "\n",
        "rf_male,   _ = train_gender_model(\"male\")\n",
        "rf_female, _ = train_gender_model(\"female\")\n",
        "\n",
        "joblib.dump(rf_male,   f\"{MODEL_DIR}/rf_male_20.pkl\")\n",
        "joblib.dump(rf_female, f\"{MODEL_DIR}/rf_female_20.pkl\")\n",
        "joblib.dump(FEATS_20,  f\"{MODEL_DIR}/feature_names_20.pkl\")\n",
        "print(\"Saved 20-feature models to:\", MODEL_DIR)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rVGKlnJGJA2y",
        "outputId": "1b06be12-440f-4743-fe3e-e1db69e46887"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Male RF (20 feats) holdout acc: 0.793\n",
            "Female RF (20 feats) holdout acc: 0.862\n",
            "Saved 20-feature models to: /content/drive/My Drive/ser_models_20\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Reload 20-feature models + feats\n",
        "rf_male_20   = joblib.load(f\"{MODEL_DIR}/rf_male_20.pkl\")\n",
        "rf_female_20 = joblib.load(f\"{MODEL_DIR}/rf_female_20.pkl\")\n",
        "FEATS_20     = joblib.load(f\"{MODEL_DIR}/feature_names_20.pkl\")\n",
        "\n",
        "# Router for 20-feature models\n",
        "def predict_router_20(rav_df):\n",
        "    X = rav_df.reindex(columns=FEATS_20, fill_value=0.0).to_numpy(np.float32)\n",
        "    Xz = row_z(X)\n",
        "    pm = rf_male_20.predict_proba(Xz); im = pm.argmax(1); cm = pm[np.arange(len(im)), im]\n",
        "    pf = rf_female_20.predict_proba(Xz); iF = pf.argmax(1); cF = pf[np.arange(len(iF)), iF]\n",
        "    pick_f = cF > cm\n",
        "    pred   = np.where(pick_f, rf_female_20.classes_[iF], rf_male_20.classes_[im])\n",
        "    conf   = np.where(pick_f, cF, cm)\n",
        "    routed = np.where(pick_f, \"female\", \"male\")\n",
        "    out = rav_df.copy()\n",
        "    out[\"pred\"] = pred.astype(int)\n",
        "    out[\"conf\"] = conf.astype(np.float32)\n",
        "    out[\"routed\"] = routed\n",
        "    return out\n",
        "\n",
        "results_20 = predict_router_20(rav)\n",
        "\n",
        "# Evaluate vs RAVDESS ground-truth\n",
        "core_names = rav[\"labels\"].astype(str).str.replace(r\"^(male|female)_\", \"\", regex=True)\n",
        "y_true_id  = core_names.map(NAME_TO_ID).to_numpy()\n",
        "mask_valid = ~pd.isna(y_true_id)\n",
        "\n",
        "print(\"RAVDESS accuracy (20 features):\",\n",
        "      accuracy_score(y_true_id[mask_valid].astype(int),\n",
        "                     results_20.loc[mask_valid,\"pred\"].to_numpy()))\n",
        "\n",
        "print(\"\\nClassification report:\\n\",\n",
        "      classification_report(\n",
        "          y_true_id[mask_valid].astype(int),\n",
        "          results_20.loc[mask_valid,\"pred\"].to_numpy(),\n",
        "          labels=list(range(8)),\n",
        "          target_names=[ID_TO_NAME[i] for i in range(8)],\n",
        "          digits=3\n",
        "      ))\n",
        "\n",
        "# Optional: high-confidence slice\n",
        "THRESH = 0.60\n",
        "keep = results_20[\"conf\"] >= THRESH\n",
        "if keep.any():\n",
        "    acc_kept = accuracy_score(\n",
        "        y_true_id[mask_valid & keep].astype(int),\n",
        "        results_20.loc[mask_valid & keep,\"pred\"].to_numpy()\n",
        "    )\n",
        "    print(f\"\\nWith threshold {THRESH}: coverage={keep.mean():.3f}, acc_on_kept={acc_kept:.3f}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lorPtp4lKWWD",
        "outputId": "52bfcbc4-c148-4978-8dbf-41629ce0f149"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RAVDESS accuracy (20 features): 0.46574074074074073\n",
            "\n",
            "Classification report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "       angry      0.727     0.578     0.644       576\n",
            "        calm      0.567     0.285     0.379       576\n",
            "     disgust      0.296     0.668     0.411       576\n",
            "        fear      0.417     0.575     0.484       576\n",
            "       happy      0.767     0.429     0.550       576\n",
            "     neutral      0.296     0.302     0.299       288\n",
            "         sad      0.526     0.345     0.417       576\n",
            "    surprise      0.546     0.462     0.500       576\n",
            "\n",
            "    accuracy                          0.466      4320\n",
            "   macro avg      0.518     0.456     0.461      4320\n",
            "weighted avg      0.533     0.466     0.471      4320\n",
            "\n",
            "\n",
            "With threshold 0.6: coverage=0.069, acc_on_kept=0.811\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import ConfusionMatrixDisplay, confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "y_pred = results_20.loc[mask_valid,\"pred\"].to_numpy()\n",
        "cm = confusion_matrix(y_true_id[mask_valid].astype(int), y_pred, labels=list(range(8)))\n",
        "disp = ConfusionMatrixDisplay(cm, display_labels=[ID_TO_NAME[i] for i in range(8)])\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(7,7))\n",
        "disp.plot(ax=ax, cmap=\"Blues\", values_format=\"d\", colorbar=True)\n",
        "plt.title(\"RAVDESS confusion matrix (20 features)\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 584
        },
        "id": "bLHhGlx5MvoP",
        "outputId": "ddeb5160-cc68-4ded-abb7-c5a9273aa69c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x700 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import precision_recall_fscore_support\n",
        "\n",
        "prec, rec, f1, support = precision_recall_fscore_support(\n",
        "    y_true_id[mask_valid].astype(int), y_pred, labels=list(range(8))\n",
        ")\n",
        "\n",
        "plt.figure(figsize=(8,4))\n",
        "plt.bar(range(8), f1, tick_label=[ID_TO_NAME[i] for i in range(8)])\n",
        "plt.ylabel(\"F1-score\")\n",
        "plt.title(\"Per-emotion F1 (RAVDESS, 20 features)\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "d0IADx4dM1OX",
        "outputId": "dd50416b-82a2-4e8a-9692-244b4acdc1af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "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XLmyzd0rsuPh4aFhw4YpKipKn3/+uXX6x7x581SzZk0NGzYswzoffvih5s+fbw2z0vXpBNOmTdPChQt18OBBWSwWmykAOZGamqr58+fL3d1djRo1ytW62Un/4y49LGalRIkSqly5sjVQ58VXX32l559/Xu3atdPUqVMz7RMcHKyPP/5Yu3fvVmBgoLU9/QLGrMJodtLvXOHp6XnTEewvvvhCkZGRNn+k/PPPPxku1MzuPVSiRIkM/a9cuXLTc/zvesuWLZujEffKlSvr1Vdf1auvvqp9+/YpODhYEydO1Keffmrt89dff+nKlSt5vkgNuFXMmQUKQLt27eTo6Kg333wzwyiiYRg6ffp0tusHBgYqPDzc+ki/evhWt5tTjo6Oeuihh/TVV1/ZXO2clJSk+fPnq1GjRtaPJ9O/ESknX/PZokULJSYmauHChda2a9eu6d1335WHh4fCwsLypf6CEhoaql9++SXH/Z9++mlVqFBBY8eOlSQdOXJEP/74o9q3b68nnngiwyMqKkr79++3hi/p+vQDf39/ffrpp1q4cKHCwsJsbsF0M6mpqerVq5d2796tXr165en2WLGxsZm2L1++XJKs01N+/fXXTOdVHjp0SLt27cp0GktO/Pjjj+rYsaOaNGmiefPmZZi2kq5169YqUqSI3n//fWubYRiaNm2aypcvr/vvvz/X+w4JCVHlypU1YcIE61SNG508edL6b0dHxwzv03fffTfDqGp276HKlSvrxx9/tGn76KOPshyZ/beIiAh5enpq9OjRmd4FJL3ey5cvW6df3LjvYsWKZZiqER8fL0l5On9AfmBkFigAlStX1qhRozRo0CAlJCSoTZs2KlasmA4ePKglS5bohRdeUL9+/QrNdjMzatQorVq1So0aNVL37t3l5OSkDz/8UCkpKTYfawcHB8vR0VFjx47V+fPn5eLiogcffNDmfqPpXnjhBX344Yfq0qWL4uPj5e/vry+++ELr16/X5MmTM8zfvN0OHTqkuXPnSpI1lKZ/7O3n56dnn3022/Vbt26tuXPn2sxrzU6RIkXUu3dv9e/fXytXrtSvv/4qwzD02GOPZdq/RYsWcnJy0rx586wX6VksFj311FMaPXq0JGX7LUznz5+3jqhdvnzZ+g1gBw4cUMeOHTVy5MgM6/z11182o3DpPDw81KZNG+txV6xYUa1atVLlypWVnJys1atX65tvvlH9+vXVqlUrSdcvPho2bJgee+wx3XffffLw8NCff/6pGTNmKCUlxeb+qQkJCapYsaIiIyM1a9asLI/p0KFDeuyxx2SxWPTEE09o0aJFNstr166t2rVrS7o+Z7xPnz4aP368rl69qvr162vp0qX66aefNG/evCynsWTHwcFBH3/8sR555BHdc889ioqKUvny5fXXX39p7dq18vT01DfffCNJevTRRzV37lx5eXkpMDBQGzdu1OrVq62370uX3Xvo+eef10svvaTHH39czZs316+//qrvvvsuxx/xe3p66oMPPtCzzz6runXrqmPHjipTpowOHz6sZcuWqWHDhnrvvff0xx9/qFmzZmrfvr0CAwPl5OSkJUuWKCkpKcM3pa1atUp33313hqkHQIEp6NsnAHearL4BLDNffvml0ahRI6No0aJG0aJFjerVqxs9evQw9u7da+1zs1so5fd2s/qWJ0k235RkGIaxdetWIyIiwvDw8DDc3d2NBx54wNiwYUOGdadPn25UqlTJcHR0tLnF0L9vzWUY178hKioqyihdurTh7Oxs1KpVy+aWYIbxv1tzZXabIGVxq6Ib5fQbwLK7hde/685MSkqKUbp0aWPkyJE27Vl9A5hhGMb58+cNLy8vIywszKhVq5Zx9913Z7uPpk2bGmXLlrW55dTOnTsNSYaLi4tx9uzZTNdLvzVb+sPDw8MICAgwnnnmGeP777/PdJ3sbs3l5+dn7ffZZ58ZHTt2NCpXrmy4ubkZrq6uRmBgoDF48GDr7dUMwzD+/PNPY+jQocZ9991nlC1b1nBycjLKlCljtGzZ0lizZo3Nvnfs2JGj22Vl93+W2WsjNTXVGD16tOHn52c4Ozsb99xzj82t4bKT3Xt927ZtRrt27YxSpUoZLi4uhp+fn9G+fXsjNjbW2ufs2bPW17qHh4cRERFh7NmzJ8NttQwj6/dQamqqMXDgQKN06dKGu7u7ERERYezfvz/LW3Nl9XNp7dq1RkREhOHl5WW4uroalStXNrp06WL88ssvhmEYxqlTp4wePXoY1atXN4oWLWp4eXkZDRo0MD7//PMM59PHx8d44403cnQOgdvBYhiF4MoJALhDjBw5UjNnztS+ffvyNNKH695//30NGDBABw4ckLe3t73LQRaWLl2qp556SgcOHJCPj4+9y8F/FHNm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rrtUrVq1gj60XElLS9OAAQNUsmRJlStXTsOHD7cumzRpkmrVqqWiRYvK19dX3bt316VLl6zLZ82apeLFi2vp0qUKCAiQq6urIiIidOTIEWuf9J89H374ofVnVPv27XX+/HlJ0o8//qgiRYooMTHRpq4+ffqocePGt/fgM9G0aVP16tUry3Ny7tw5Pf/88ypTpow8PT314IMP6tdff7UuT///v1GfPn2sr/0uXbrohx9+0JQpU2SxWGSxWJSQkKC4uDhZLBatWLFCISEhcnFx0bp163TgwAG1bt1a3t7e8vDwUP369bV69eoCOBP554svvlCtWrXk5uamUqVKKTw8XMnJydqyZYuaN2+u0qVLy8vLS2FhYdq6davNuvv27VOTJk3k6uqqwMBArVq1yk5Hkb2sjjGzUfg2bdqoS5cu1uf+/v4aOXKkOnfuLE9PT73wwgvWn70LFizQ/fffL1dXV9WsWVM//PCDdb2sXjP/nmYQFxene++9V0WLFlXx4sXVsGFDHTp0yLr8q6++Ut26deXq6qpKlSrpzTff1LVr127Xqco3hNlCJjk5WdHR0frll18UGxsrBwcHtW3bVmlpadY+gwcPVr9+/bR9+3ZVrVpVnTp1sr7Y1q9fr5deekm9e/fW9u3b1bx5c2u4u9H+/fv15ZdfavHixdq+fbuefPJJpaam6uuvv7b2OXHihJYtW6bnnnvu9h94Hg0aNEhjxozRkCFDtGvXLs2fP9/6hRvFihXTrFmztGvXLk2ZMkXTp0/X22+/ne321qxZo2PHjunHH3/UpEmTNGzYMD366KMqUaKENm3apJdeekkvvviijh49WhCHd1P9+/fXDz/8oK+++krff/+94uLiMvwCSPfll1/q7bff1ocffqh9+/Zp6dKlqlWrlnV5586ddezYMcXFxenLL7/URx99pBMnTuSqnvT/hxUrVmj37t364IMPVLp0aUnS5s2bJUmrV6/W8ePHtXjx4jwedf6bMmWKRowYoQoVKuj48ePasmWLYmJiNGfOHE2bNk07d+5U37599cwzz1h/gaSlpalChQpatGiRdu3apaFDh+r111/X559/brPt2NhY7d27V6tWrdK3335rj8PLsdmzZ6to0aLatGmTxo0bpxEjRlgDg4ODg9555x3t3LlTs2fP1po1azRgwACb9S9fvqy33npLc+bM0fr163Xu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s2YpNTVVDRo0kLu7uz799FO5ubnJz8/PesXtCy+8oA8++EBFihTRq6++Kjc3N+trx83NTffdd5/GjBmjihUr6sSJE3rjjTds9jF06FCFhITonnvuUUpKir799ltrkClbtqzc3Ny0cuVKVahQQa6urvLy8rq9JymPihUrpn79+qlv375KS0tTo0aNdP78ea1fv16enp6KjIxUQECA5syZo++++04VK1bU3LlztWXLFutdG+4kVapU0dWrV/Xuu++qVatWWr9+vaZNm5ahX5EiRfTKK6/onXfekZOTk3r27Kn77rvPZqqTq6urIiMjNWHCBF24cEG9evVS+/btVa5cOWufiIgIeXp6atSoURoxYkSBHGNuhYeHKzQ0VG3atNG4ceNUtWpVHTt2TMuWLVPbtm1Vr149Pfjggxo/frzmzJmj0NBQffrpp/r999+tfwxK169e37RpkxISEuTh4aGSJUtmuc+AgAAtXrxYrVq1ksVi0ZAhQ0z1KdGmTZsUGxurhx56SGXLltWmTZt08uRJ1ahRQwEBAZo7d67q1aunCxcuqH///jafvoWHh6tq1aqKjIzU+PHjdeHCBZvBisIiu2MsWrSooqOjtWzZMlWuXFmTJk3SuXPncrztqVOnKiAgQDVq1NDbb7+ts2fP5upTi4MHD+qjjz7SY489prvuukt79+7Vvn371LlzZ0nXf34/+uijuvvuu/XEE0/IwcFBv/76q37//XeNGjUqt6eiQDHNoBBxcHDQggULFB8fr5o1a6pv374aP358rrbRsGFDTZs2TZMmTVJQUJBWrlypvn375vgjAi8vLz3++OPy8PDIcEuZwmjIkCF69dVXNXToUNWoUUMdOnTQiRMn9Nhjj6lv377q2bOngoODtWHDBpurQu8U48ePV+PGjdWqVSuFh4erUaNG1pHVfytevLimT5+uhg0bqnbt2lq9erW++eYblSpVSpI0Z84ceXt7q0mTJmrbtq26deumYsWK2bx2ZsyYoWvXrikkJER9+vTJ8APO2dlZgwYNUu3atdWkSRM5OjpqwYIFkq7P8XrnnXf04Ycf6q677lLr1q1v01nJHyNHjtSQIUMUExOjGjVq6OGHH9ayZcusYfXFF19Uu3bt1KFDBzVo0ECnT5+2GaW9kwQFBWnSpEkaO3asatasqXnz5ikmJiZDP3d3dw0cOFBPPfWUGjZsKA8PDy1cuNCmT5UqVdSuXTu1aNFCDz30kGrXrq3333/fpo+Dg4O6dOmi1NRU6y/awsZisWj58uVq0qSJoqKiVLVqVXXs2FGHDh2y3lElIiJCQ4YM0YABA1S/fn1dvHgxw/H069dPjo6OCgwMVJkyZbKd/zpp0iSVKFFC999/v1q1aqWIiAibee6Fnaenp3788Ue1aNFCVatW1RtvvKGJEyfqkUce0SeffKKzZ8+qbt26evbZZ9WrVy+VLVvWuq6Dg4OWLFmiv//+W/fee6+ef/75QnmVfXbH+NxzzykyMlKdO3dWWFiYKlWqlONRWUkaM2aMxowZo6CgIK1bt05ff/219W4xOeHu7q49e/bo8ccfV9WqVfXCCy+oR48eevHFFyVdf71+++23+v7771W/fn3dd999evvtt+Xn55fr81DQLMa/J3DgjtOtWzft2bNHP/30U476N2vWTPfcc4/eeeed21wZCrOjR4/K19fXeuEPkJ1Zs2apT58+2Y40DR8+XEuXLs3Rt8B17dpVJ0+etLldIPBflJCQoIoVK2rbtm3/ia+mzQumGdyBJkyYoObNm6to0aJasWKFZs+enWHkIzNnz55VXFyc4uLictQfd5Y1a9bo0qVLqlWrlo4fP64BAwbI39/fOkcLKAjnz5/Xjh07NH/+fIIsgBwhzN6BNm/erHHjxunixYuqVKmS3nnnnQwXSGWmTp06Onv2rMaOHVvov6kI+e/q1at6/fXX9eeff6pYsWK6//77NW/evAxXcwO3U+vWrbV582a99NJLat68ub3LAWACTDMAAACAaXEBGAAAAEyLMAsAAADTIswCAADAtAizAAAAMC3CLAAAAEyLMAsAAADTIswCAADAtAizAAAAMC3CLAAAAEzr/wC2f9/5QInOIAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "thresholds = np.linspace(0,1,21)\n",
        "accs, covs = [], []\n",
        "\n",
        "for th in thresholds:\n",
        "    keep = results_20[\"conf\"] >= th\n",
        "    if keep.any():\n",
        "        accs.append(accuracy_score(y_true_id[mask_valid & keep],\n",
        "                                   results_20.loc[mask_valid & keep,\"pred\"]))\n",
        "        covs.append(keep.mean())\n",
        "    else:\n",
        "        accs.append(np.nan); covs.append(0)\n",
        "\n",
        "plt.plot(covs, accs, marker=\"o\")\n",
        "plt.xlabel(\"Coverage (fraction of samples kept)\")\n",
        "plt.ylabel(\"Accuracy on kept\")\n",
        "plt.title(\"Confidence–accuracy tradeoff\")\n",
        "plt.grid(True); plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "XU90s1PrM-WJ",
        "outputId": "83e90d9d-40fd-42a0-fa0c-18d7342c234d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "errors = results_20[mask_valid].copy()\n",
        "errors[\"true\"] = y_true_id[mask_valid]\n",
        "errors = errors[errors[\"true\"] != errors[\"pred\"]]\n",
        "\n",
        "print(errors.sample(10)[[\"true\",\"pred\",\"conf\",\"routed\"]])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZxCzvqLGNLeU",
        "outputId": "5ee97d10-4235-47ba-8cd4-c4f29bcc8541"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      true  pred      conf  routed\n",
            "1114     4     5  0.215000    male\n",
            "2808     5     2  0.592500  female\n",
            "3461     0     3  0.397500    male\n",
            "3360     3     6  0.280198  female\n",
            "1508     0     2  0.390000  female\n",
            "3174     3     0  0.432500    male\n",
            "2637     3     2  0.340000  female\n",
            "1344     4     2  0.282500  female\n",
            "287      2     7  0.427466    male\n",
            "4192     3     0  0.475000  female\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import (\n",
        "    confusion_matrix, ConfusionMatrixDisplay,\n",
        "    precision_recall_fscore_support, accuracy_score\n",
        ")\n",
        "\n",
        "# ---------- prepare y_true / y_pred ----------\n",
        "y_true = y_true_id[mask_valid].astype(int)\n",
        "y_pred = results_20.loc[mask_valid, \"pred\"].to_numpy()\n",
        "\n",
        "# Metrics by class\n",
        "labels = list(range(8))\n",
        "target_names = [ID_TO_NAME[i] for i in labels]\n",
        "prec, rec, f1, support = precision_recall_fscore_support(y_true, y_pred, labels=labels)\n",
        "\n",
        "# Overall numbers\n",
        "overall_acc = accuracy_score(y_true, y_pred)\n",
        "macro_f1 = np.nanmean(f1)\n",
        "\n",
        "# Confidence vs accuracy curve\n",
        "ths = np.linspace(0.0, 1.0, 21)\n",
        "accs, covs = [], []\n",
        "for t in ths:\n",
        "    keep = results_20[\"conf\"].to_numpy() >= t\n",
        "    keep_mask = mask_valid & keep\n",
        "    if keep_mask.any():\n",
        "        accs.append(accuracy_score(y_true_id[keep_mask].astype(int),\n",
        "                                   results_20.loc[keep_mask, \"pred\"]))\n",
        "        covs.append(keep.mean())\n",
        "    else:\n",
        "        accs.append(np.nan); covs.append(0.0)\n",
        "\n",
        "# Pick a reporting threshold (you used 0.6)\n",
        "T = 0.60\n",
        "keep_T = (results_20[\"conf\"].to_numpy() >= T)\n",
        "cov_T = keep_T.mean()\n",
        "acc_T = accuracy_score(y_true_id[mask_valid & keep_T].astype(int),\n",
        "                       results_20.loc[mask_valid & keep_T, \"pred\"]) if (mask_valid & keep_T).any() else np.nan\n",
        "\n",
        "# ---------- build the 2x2 dashboard ----------\n",
        "fig = plt.figure(figsize=(12, 10))\n",
        "gs = fig.add_gridspec(2, 2, height_ratios=[1.2, 1.0], width_ratios=[1.2, 1.0], wspace=0.25, hspace=0.25)\n",
        "\n",
        "# (1) Confusion matrix (all samples)\n",
        "ax1 = fig.add_subplot(gs[0, 0])\n",
        "cm = confusion_matrix(y_true, y_pred, labels=labels)\n",
        "disp = ConfusionMatrixDisplay(cm, display_labels=target_names)\n",
        "disp.plot(ax=ax1, colorbar=False, cmap=\"Blues\", values_format=\"d\")\n",
        "ax1.set_title(\"Confusion matrix (RAVDESS, 20 features)\")\n",
        "ax1.set_xlabel(\"Predicted\"); ax1.set_ylabel(\"True\")\n",
        "\n",
        "# (2) Per-emotion F1 bar\n",
        "ax2 = fig.add_subplot(gs[0, 1])\n",
        "ax2.bar(np.arange(len(labels)), f1)\n",
        "ax2.set_xticks(np.arange(len(labels)))\n",
        "ax2.set_xticklabels(target_names, rotation=30, ha=\"right\")\n",
        "ax2.set_ylim(0, 1)\n",
        "ax2.set_ylabel(\"F1-score\")\n",
        "ax2.set_title(\"Per-emotion F1\")\n",
        "\n",
        "# (3) Confidence → accuracy curve\n",
        "ax3 = fig.add_subplot(gs[1, 0])\n",
        "ax3.plot(covs, accs, marker=\"o\")\n",
        "ax3.set_xlabel(\"Coverage (fraction kept)\")\n",
        "ax3.set_ylabel(\"Accuracy on kept\")\n",
        "ax3.set_title(\"Confidence–accuracy tradeoff\")\n",
        "ax3.grid(True, alpha=0.3)\n",
        "# mark your chosen threshold point\n",
        "if not np.isnan(acc_T):\n",
        "    ax3.plot(cov_T, acc_T, marker=\"o\")\n",
        "    ax3.annotate(f\"T={T:.2f}\\nacc={acc_T:.3f}\\ncov={cov_T:.3f}\",\n",
        "                 (cov_T, acc_T), textcoords=\"offset points\", xytext=(8,8))\n",
        "\n",
        "# (4) Summary panel\n",
        "ax4 = fig.add_subplot(gs[1, 1])\n",
        "ax4.axis(\"off\")\n",
        "summary = (\n",
        "    f\"RAVDESS (20 shared features)\\n\\n\"\n",
        "    f\"Overall accuracy:  {overall_acc:.3f}\\n\"\n",
        "    f\"Macro F1:          {macro_f1:.3f}\\n\"\n",
        "    f\"Samples:           {len(y_true)}\\n\\n\"\n",
        "    f\"At threshold T={T:.2f}:\\n\"\n",
        "    f\"  Coverage kept:   {cov_T:.3f}\\n\"\n",
        "    f\"  Acc on kept:     {acc_T:.3f}\\n\\n\"\n",
        "    \"Class support:\\n\" +\n",
        "    \"\\n\".join([f\"  {n:<9}: {int(s)}\" for n, s in zip(target_names, support)])\n",
        ")\n",
        "ax4.text(0.0, 0.98, summary, va=\"top\", ha=\"left\", fontsize=11, family=\"monospace\")\n",
        "\n",
        "fig.suptitle(\"SER cross-corpus analysis dashboard\", fontsize=14, y=0.99)\n",
        "plt.tight_layout()\n",
        "\n",
        "# Optional: save to Drive\n",
        "out_path = \"/content/drive/My Drive/ser_ravdess_dashboard.png\"\n",
        "plt.savefig(out_path, dpi=150, bbox_inches=\"tight\")\n",
        "print(\"Saved:\", out_path)\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "xzL9cRIgOCL_",
        "outputId": "869b5a7c-a9e9-46cc-a1f6-54f494a77081"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-2595755743.py:92: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.tight_layout()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved: /content/drive/My Drive/ser_ravdess_dashboard.png\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# === SER summary + two dashboards (overall + high-confidence) =================\n",
        "# One cell: mount Drive, load models/data, evaluate RAVDESS, save summary table,\n",
        "# and export two analysis dashboards as PNGs.\n",
        "\n",
        "# 0) Mount Drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# 1) Imports & config\n",
        "import os, joblib, numpy as np, pandas as pd, matplotlib.pyplot as plt\n",
        "from sklearn.metrics import (accuracy_score, precision_recall_fscore_support,\n",
        "                             confusion_matrix, ConfusionMatrixDisplay)\n",
        "\n",
        "DRIVE       = \"/content/drive\"\n",
        "CACHE_DIR   = f\"{DRIVE}/My Drive/ser_cache\"         # df.pkl here\n",
        "MODEL20_DIR = f\"{DRIVE}/My Drive/ser_models_20\"     # rf_male_20.pkl, rf_female_20.pkl, feature_names_20.pkl\n",
        "RAV_CSV     = f\"{DRIVE}/My Drive/features.csv\"      # RAVDESS MFCC CSV\n",
        "THRESH      = 0.60\n",
        "\n",
        "NAME_TO_ID = {\n",
        "    \"angry\":0, \"calm\":1, \"disgust\":2, \"fear\":3,\n",
        "    \"happy\":4, \"neutral\":5, \"sad\":6, \"surprise\":7\n",
        "}\n",
        "ID_TO_NAME = {v:k for k,v in NAME_TO_ID.items()}\n",
        "LABELS = list(range(8))\n",
        "\n",
        "def row_z(X: np.ndarray) -> np.ndarray:\n",
        "    X = X.astype(np.float32, copy=False)\n",
        "    m = X.mean(axis=1, keepdims=True); s = X.std(axis=1, keepdims=True) + 1e-8\n",
        "    return (X - m) / s\n",
        "\n",
        "def encode_labels(series: pd.Series) -> np.ndarray:\n",
        "    s = series.copy()\n",
        "    if s.dtype.kind in \"iu\":  # already ints\n",
        "        return s.astype(int).to_numpy()\n",
        "    s = (s.astype(str).str.replace(r\"^(male|female)_\", \"\", regex=True)\n",
        "                   .str.lower().str.strip())\n",
        "    return s.map(NAME_TO_ID).astype(int).to_numpy()\n",
        "\n",
        "def macro_f1(y_true, y_pred, labels):\n",
        "    _, _, f1, _ = precision_recall_fscore_support(y_true, y_pred, labels=labels, zero_division=0)\n",
        "    return float(np.nanmean(f1))\n",
        "\n",
        "# 2) Load data & models (20-feature router required)\n",
        "df_path = f\"{CACHE_DIR}/df.pkl\"\n",
        "assert os.path.exists(df_path), f\"Missing {df_path}. Please cache df.pkl first.\"\n",
        "df = joblib.load(df_path)\n",
        "\n",
        "for fn in [\"rf_male_20.pkl\",\"rf_female_20.pkl\",\"feature_names_20.pkl\"]:\n",
        "    assert os.path.exists(f\"{MODEL20_DIR}/{fn}\"), f\"Missing {MODEL20_DIR}/{fn}.\"\n",
        "rf_male_20   = joblib.load(f\"{MODEL20_DIR}/rf_male_20.pkl\")\n",
        "rf_female_20 = joblib.load(f\"{MODEL20_DIR}/rf_female_20.pkl\")\n",
        "FEATS_20     = joblib.load(f\"{MODEL20_DIR}/feature_names_20.pkl\")\n",
        "\n",
        "assert os.path.exists(RAV_CSV), f\"Missing {RAV_CSV}.\"\n",
        "rav = pd.read_csv(RAV_CSV)\n",
        "\n",
        "# 3) Predict on RAVDESS with dual routing (20 shared features)\n",
        "X20 = row_z(rav.reindex(columns=FEATS_20, fill_value=0.0).to_numpy(np.float32))\n",
        "pm = rf_male_20.predict_proba(X20); im = pm.argmax(1); cm = pm[np.arange(len(im)), im]\n",
        "pf = rf_female_20.predict_proba(X20); iF = pf.argmax(1); cF = pf[np.arange(len(iF)), iF]\n",
        "pick_f = cF > cm\n",
        "pred   = np.where(pick_f, rf_female_20.classes_[iF], rf_male_20.classes_[im]).astype(int)\n",
        "conf   = np.where(pick_f, cF, cm)\n",
        "\n",
        "y_true = encode_labels(rav[\"labels\"])\n",
        "\n",
        "# 4) Summary metrics table\n",
        "acc_all  = accuracy_score(y_true, pred)\n",
        "mf1_all  = macro_f1(y_true, pred, LABELS)\n",
        "\n",
        "keep     = conf >= THRESH\n",
        "coverage = float(keep.mean())\n",
        "acc_T    = accuracy_score(y_true[keep], pred[keep]) if keep.any() else np.nan\n",
        "mf1_T    = macro_f1(y_true[keep], pred[keep], LABELS) if keep.any() else np.nan\n",
        "\n",
        "summary = pd.DataFrame([\n",
        "    [\"RAVDESS (20 feats, router)\", acc_all, mf1_all, 1.0],\n",
        "    [f\"RAVDESS conf ≥ {THRESH:.2f}\", acc_T, mf1_T, coverage],\n",
        "], columns=[\"Setup\", \"Accuracy\", \"Macro-F1\", \"Coverage\"])\n",
        "\n",
        "out_csv = f\"{DRIVE}/My Drive/ser_summary_metrics.csv\"\n",
        "summary.to_csv(out_csv, index=False)\n",
        "print(\"\\n=== SER Summary Metrics ===\")\n",
        "print(summary.to_string(index=False))\n",
        "print(\"Saved table to:\", out_csv)\n",
        "\n",
        "# 5) Dashboard builder\n",
        "def build_dashboard(y_true_int, y_pred_int, conf_vec, title_suffix, save_path, T=THRESH):\n",
        "    # per-class stats\n",
        "    _, _, f1, support = precision_recall_fscore_support(y_true_int, y_pred_int, labels=LABELS, zero_division=0)\n",
        "\n",
        "    overall_acc = accuracy_score(y_true_int, y_pred_int)\n",
        "    macroF1     = float(np.nanmean(f1))\n",
        "\n",
        "    # Conf→Acc curve\n",
        "    ths = np.linspace(0.0, 1.0, 21)\n",
        "    accs, covs = [], []\n",
        "    for t in ths:\n",
        "        m = conf_vec >= t\n",
        "        if m.any():\n",
        "            accs.append(accuracy_score(y_true_int[m], y_pred_int[m]))\n",
        "            covs.append(m.mean())\n",
        "        else:\n",
        "            accs.append(np.nan); covs.append(0.0)\n",
        "\n",
        "    # chosen threshold point\n",
        "    keepT = conf_vec >= T\n",
        "    cov_T = keepT.mean()\n",
        "    acc_T = accuracy_score(y_true_int[keepT], y_pred_int[keepT]) if keepT.any() else np.nan\n",
        "\n",
        "    # figure\n",
        "    fig = plt.figure(figsize=(12, 10))\n",
        "    gs = fig.add_gridspec(2, 2, height_ratios=[1.2, 1.0], width_ratios=[1.2, 1.0], wspace=0.25, hspace=0.25)\n",
        "\n",
        "    # (1) Confusion matrix\n",
        "    ax1 = fig.add_subplot(gs[0, 0])\n",
        "    cm  = confusion_matrix(y_true_int, y_pred_int, labels=LABELS)\n",
        "    disp = ConfusionMatrixDisplay(cm, display_labels=[ID_TO_NAME[i] for i in LABELS])\n",
        "    disp.plot(ax=ax1, colorbar=False, cmap=\"Blues\", values_format=\"d\")\n",
        "    ax1.set_title(f\"Confusion matrix {title_suffix}\")\n",
        "    ax1.set_xlabel(\"Predicted\"); ax1.set_ylabel(\"True\")\n",
        "\n",
        "    # (2) Per-emotion F1\n",
        "    ax2 = fig.add_subplot(gs[0, 1])\n",
        "    ax2.bar(np.arange(len(LABELS)), f1)\n",
        "    ax2.set_xticks(np.arange(len(LABELS)))\n",
        "    ax2.set_xticklabels([ID_TO_NAME[i] for i in LABELS], rotation=30, ha=\"right\")\n",
        "    ax2.set_ylim(0, 1); ax2.set_ylabel(\"F1-score\")\n",
        "    ax2.set_title(\"Per-emotion F1\")\n",
        "\n",
        "    # (3) Confidence–accuracy tradeoff\n",
        "    ax3 = fig.add_subplot(gs[1, 0])\n",
        "    ax3.plot(covs, accs, marker=\"o\")\n",
        "    ax3.set_xlabel(\"Coverage (fraction kept)\")\n",
        "    ax3.set_ylabel(\"Accuracy on kept\")\n",
        "    ax3.set_title(\"Confidence–accuracy tradeoff\")\n",
        "    ax3.grid(True, alpha=0.3)\n",
        "    if not np.isnan(acc_T):\n",
        "        ax3.plot(cov_T, acc_T, marker=\"o\")\n",
        "        ax3.annotate(f\"T={T:.2f}\\nacc={acc_T:.3f}\\ncov={cov_T:.3f}\",\n",
        "                     (cov_T, acc_T), textcoords=\"offset points\", xytext=(8,8))\n",
        "\n",
        "    # (4) Summary panel\n",
        "    ax4 = fig.add_subplot(gs[1, 1]); ax4.axis(\"off\")\n",
        "    summary_txt = (\n",
        "        f\"{title_suffix}\\n\\n\"\n",
        "        f\"Overall accuracy:  {overall_acc:.3f}\\n\"\n",
        "        f\"Macro F1:          {macroF1:.3f}\\n\"\n",
        "        f\"Samples:           {len(y_true_int)}\\n\\n\"\n",
        "        f\"At threshold T={T:.2f}:\\n\"\n",
        "        f\"  Coverage kept:   {cov_T:.3f}\\n\"\n",
        "        f\"  Acc on kept:     {acc_T:.3f}\\n\\n\"\n",
        "        \"Class support:\\n\" +\n",
        "        \"\\n\".join([f\"  {ID_TO_NAME[i]:<9}: {int(support[i])}\" for i in LABELS])\n",
        "    )\n",
        "    ax4.text(0.0, 0.98, summary_txt, va=\"top\", ha=\"left\", fontsize=11, family=\"monospace\")\n",
        "\n",
        "    fig.suptitle(f\"SER cross-corpus analysis dashboard — {title_suffix}\", fontsize=14, y=0.995)\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(save_path, dpi=150, bbox_inches=\"tight\")\n",
        "    print(\"Saved dashboard:\", save_path)\n",
        "    plt.show()\n",
        "\n",
        "# 6) Make BOTH dashboards\n",
        "dash_all = f\"{DRIVE}/My Drive/ser_ravdess_dashboard_all.png\"\n",
        "build_dashboard(y_true, pred, conf, \"RAVDESS (ALL)\", dash_all, T=THRESH)\n",
        "\n",
        "dash_hi  = f\"{DRIVE}/My Drive/ser_ravdess_dashboard_conf>=%.2f.png\" % THRESH\n",
        "mask_hi  = conf >= THRESH\n",
        "if mask_hi.any():\n",
        "    build_dashboard(y_true[mask_hi], pred[mask_hi], conf[mask_hi],\n",
        "                    f\"RAVDESS (conf ≥ {THRESH:.2f})\", dash_hi, T=THRESH)\n",
        "else:\n",
        "    print(f\"No samples above threshold {THRESH:.2f}; skip high-confidence dashboard.\")\n",
        "# ============================================================================\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1465
        },
        "id": "Ycn1HlM-XNL-",
        "outputId": "936d58a6-1e35-4abc-a9be-11da1b0eac67"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n",
            "\n",
            "=== SER Summary Metrics ===\n",
            "                     Setup  Accuracy  Macro-F1  Coverage\n",
            "RAVDESS (20 feats, router)  0.465741  0.460533   1.00000\n",
            "       RAVDESS conf ≥ 0.60  0.811448  0.602408   0.06875\n",
            "Saved table to: /content/drive/My Drive/ser_summary_metrics.csv\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-596019085.py:160: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.tight_layout()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved dashboard: /content/drive/My Drive/ser_ravdess_dashboard_all.png\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-596019085.py:160: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n",
            "  plt.tight_layout()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saved dashboard: /content/drive/My Drive/ser_ravdess_dashboard_conf>=0.60.png\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM10rDrLN9/21QlDyh3NibX",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}